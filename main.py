from aiogram import Bot, Dispatcher, executor, types
import os
import json
import asyncio

API_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_USERNAME = "@merkulyevy_live_evolution_space"

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

DATA_FILE = "data.json"

# ---- –£—Ä–æ–∫–∏ ----
lessons = {
    1: {
        "question": "–í—Å–ø–æ–º–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫–∏–µ –ø—Ä–µ–æ–¥–æ–ª—ë–Ω–Ω—ã–µ —Ç–æ–±–æ–π —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —É–∫—Ä–µ–ø–∏–ª–∏ —Ç–≤–æ—ë –∑–¥–æ—Ä–æ–≤—å–µ –∏ –ø–æ–º–æ–≥–ª–∏ –æ–±—Ä–µ—Å—Ç–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Å–∏–ª—É –∏ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ?",
        "text": "üìΩ –£—Ä–æ–∫ 1. –ó–¥–æ—Ä–æ–≤—å–µ –º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ –¥–µ–Ω—å–≥–∏\n\nüîó [Rutube](https://rutube.ru/video/private/438c67c0e3510477ba92ef1c9cbda807/?p=m8ZK3IF63nq3U8aiuKBfyQ)\nüîó [YouTube](https://youtube.com/shorts/_uTHQopErp4)\n\n---\n\nüìù –ó–∞–¥–∞–Ω–∏–µ:\n\n–í—Å–ø–æ–º–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫–∏–µ –ø—Ä–µ–æ–¥–æ–ª—ë–Ω–Ω—ã–µ —Ç–æ–±–æ–π —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —É–∫—Ä–µ–ø–∏–ª–∏ —Ç–≤–æ—ë –∑–¥–æ—Ä–æ–≤—å–µ –∏ –ø–æ–º–æ–≥–ª–∏ –æ–±—Ä–µ—Å—Ç–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Å–∏–ª—É –∏ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ?"
    },
    2: {
        "question": "–†–∞—Å—Å–∫–∞–∂–∏ –æ –º–æ–º–µ–Ω—Ç–∞—Ö –≤ —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏, –∫–æ–≥–¥–∞ –¥–µ–Ω—å–≥–∏ –ø—Ä–∏–Ω–µ—Å–ª–∏ —Ç–µ–±–µ –Ω–∞—Å—Ç–æ—è—â–µ–µ —Å—á–∞—Å—Ç—å–µ –∏ —Ä–∞–¥–æ—Å—Ç—å. –ë—ã–ª–∏ –ª–∏ —ç–ø–∏–∑–æ–¥—ã, –∫–æ–≥–¥–∞ –æ–±–ª–∞–¥–∞–Ω–∏–µ –∏–º–∏ —Å—Ç–∞–ª–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –æ–≥–æ—Ä—á–µ–Ω–∏–π –∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏–π?",
        "text": "üìΩ –£—Ä–æ–∫ 2. –î–µ–Ω—å–≥–∏ –º–æ–≥—É—Ç —Å–ø–∞—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ä–æ—Å—Ç–∏ –∏ —Å–º–µ—Ä—Ç–∏\n\nüîó [Rutube](https://rutube.ru/video/private/a455fedbc14d98eeac76e09dec70aaa8/?p=O-rFwwAB4tvSNHOJK5gDgw)\nüîó [YouTube](https://youtube.com/shorts/6KOFfzMXeBo)\n\n---\n\nüìù –ó–∞–¥–∞–Ω–∏–µ:\n\n–†–∞—Å—Å–∫–∞–∂–∏ –æ –º–æ–º–µ–Ω—Ç–∞—Ö –≤ —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏, –∫–æ–≥–¥–∞ –¥–µ–Ω—å–≥–∏ –ø—Ä–∏–Ω–µ—Å–ª–∏ —Ç–µ–±–µ –Ω–∞—Å—Ç–æ—è—â–µ–µ —Å—á–∞—Å—Ç—å–µ –∏ —Ä–∞–¥–æ—Å—Ç—å. –ë—ã–ª–∏ –ª–∏ —ç–ø–∏–∑–æ–¥—ã, –∫–æ–≥–¥–∞ –æ–±–ª–∞–¥–∞–Ω–∏–µ –∏–º–∏ —Å—Ç–∞–ª–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –æ–≥–æ—Ä—á–µ–Ω–∏–π –∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏–π?"
    },
    3: {
        "question": "–ü–æ–¥–µ–ª–∏—Å—å –∏—Å—Ç–æ—Ä–∏–µ–π –æ —Ç–æ–º, –∫–∞–∫ —Ç—ã —Ä–∞—Å–ø–æ—Ä—è–¥–∏–ª—Å—è(–∞—Å—å) —Å–ª—É—á–∞–π–Ω–æ –æ–±—Ä–µ—Ç—ë–Ω–Ω—ã–º–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏. –ö–∞–∫–æ–π –ø–æ–ª–µ–∑–Ω—ã–π –≤—ã–≤–æ–¥ —Ç—ã —Å–¥–µ–ª–∞–ª(–∞) –∏–∑ —ç—Ç–æ–≥–æ –æ–ø—ã—Ç–∞?",
        "text": "üìΩ –£—Ä–æ–∫ 3. –õ–µ–≥–∫–∏–µ –¥–µ–Ω—å–≥–∏ –ª–µ–≥–∫–æ –¥–∞—é—Ç—Å—è\n\nüîó [Rutube](https://rutube.ru/video/private/ad9e2b3c210d21cd23712045627dab40/?p=Ib29o4dCFybWBwITaw8EcA)\nüîó [YouTube](https://youtube.com/shorts/nzpJTNZseH8)\n\n---\n\nüìù –ó–∞–¥–∞–Ω–∏–µ:\n\n–ü–æ–¥–µ–ª–∏—Å—å –∏—Å—Ç–æ—Ä–∏–µ–π –æ —Ç–æ–º, –∫–∞–∫ —Ç—ã —Ä–∞—Å–ø–æ—Ä—è–¥–∏–ª—Å—è(–∞—Å—å) —Å–ª—É—á–∞–π–Ω–æ –æ–±—Ä–µ—Ç—ë–Ω–Ω—ã–º–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏. –ö–∞–∫–æ–π –ø–æ–ª–µ–∑–Ω—ã–π –≤—ã–≤–æ–¥ —Ç—ã —Å–¥–µ–ª–∞–ª(–∞) –∏–∑ —ç—Ç–æ–≥–æ –æ–ø—ã—Ç–∞?"
    },
    4: {
        "question": "–ö–∞–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è, –Ω–∞ —Ç–≤–æ–π –≤–∑–≥–ª—è–¥, —É–±–µ—Ä–µ–≥—É—Ç —Ç–µ–±—è –æ—Ç –ø–æ—Ç–µ—Ä–∏ –¥–µ–Ω–µ–≥ –∏ –ø–æ–º–æ–≥—É—Ç –∑–∞—â–∏—Ç–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø—Ä–∏ —Ö—Ä–∞–Ω–µ–Ω–∏–∏?",
        "text": "üìΩ –£—Ä–æ–∫ 4. –î–µ–Ω—å–≥–∏ –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–µ–∑ —Ä–∏—Å–∫–∞ –ø–æ—Ç–µ—Ä—è—Ç—å\n\nüîó [Rutube](https://rutube.ru/video/private/17cda71a3427edf4f8210bff14862bcd/?p=mC_3osWPMwJgbZ1mICPjOQ)\nüîó [YouTube](https://youtube.com/shorts/nzpJTNZseH8)\n\n---\n\nüìù –ó–∞–¥–∞–Ω–∏–µ:\n\n–ö–∞–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è, –Ω–∞ —Ç–≤–æ–π –≤–∑–≥–ª—è–¥, —É–±–µ—Ä–µ–≥—É—Ç —Ç–µ–±—è –æ—Ç –ø–æ—Ç–µ—Ä–∏ –¥–µ–Ω–µ–≥ –∏ –ø–æ–º–æ–≥—É—Ç –∑–∞—â–∏—Ç–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø—Ä–∏ —Ö—Ä–∞–Ω–µ–Ω–∏–∏?"
    },
    5: {
        "question": "–ö–∞–∫–∏–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞—é—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —á–µ–ª–æ–≤–µ–∫—É, –µ—Å–ª–∏ —É –Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–µ–Ω—å–≥–∏?",
        "text": "üìΩ –£—Ä–æ–∫ 5. –ö—É–ø–∏ —Å–µ–π—á–∞—Å, –∑–∞–ø–ª–∞—Ç–∏—à—å –ø–æ—Ç–æ–º\n\nüîó [Rutube](https://rutube.ru/video/private/c190ba709164a4e7fe3f0c6be9ffd5d9/?p=OSf95L2cKiR_FfNmC9xzrg)\nüîó [YouTube](https://youtube.com/shorts/wkbbH1NzmdY)\n\n---\n\nüìù –ó–∞–¥–∞–Ω–∏–µ:\n\n–ö–∞–∫–∏–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞—é—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —á–µ–ª–æ–≤–µ–∫—É, –µ—Å–ª–∏ —É –Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–µ–Ω—å–≥–∏?"
    },
}

# ---- –•—Ä–∞–Ω–∏–ª–∏—â–µ ----
def load_data():
    if not os.path.exists(DATA_FILE):
        return {}
    with open(DATA_FILE, "r") as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f, indent=2)

def get_user(user_id):
    data = load_data()
    return data.get(str(user_id), {"step": "start", "answers": {}, "current": 1})

def update_user(user_id, new_data):
    data = load_data()
    uid = str(user_id)
    if uid not in data:
        data[uid] = {"step": "start", "answers": {}, "current": 1}
    data[uid].update(new_data)
    save_data(data)

# ---- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ----
async def check_subscription(user_id):
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
        return member.status in ["member", "administrator", "creator"]
    except:
        return False

# ---- –ö–æ–º–∞–Ω–¥—ã ----
@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    user_id = message.from_user.id
    user = get_user(user_id)

    if user["step"] == "start":
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        keyboard.add("–ù–∞—á–∞—Ç—å")
        await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç –¥–ª—è –∫—É—Ä—Å–∞. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", reply_markup=keyboard)

@dp.message_handler(lambda m: m.text == "–ù–∞—á–∞—Ç—å")
async def start_registration(message: types.Message):
    update_user(message.from_user.id, {"step": "ask_name"})
    await message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(commands=["answers"])
async def answers_cmd(message: types.Message):
    user = get_user(message.from_user.id)
    answers = user.get("answers", {})
    if not answers:
        await message.answer("–û—Ç–≤–µ—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç ‚úçÔ∏è")
        return
    text = "üìí –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –ø–æ –∫—É—Ä—Å—É:\n\n"
    for num, ans in answers.items():
        q = lessons[int(num)]["question"]
        text += f"üìΩ –£—Ä–æ–∫ {num}. {q}\n–û—Ç–≤–µ—Ç: {ans}\n\n"
    await message.answer(text)

# ---- –õ–æ–≥–∏–∫–∞ –¥–∏–∞–ª–æ–≥–∞ ----
@dp.message_handler()
async def main_flow(message: types.Message):
    user_id = message.from_user.id
    user = get_user(user_id)
    step = user["step"]

    if step == "ask_name":
        update_user(user_id, {"name": message.text, "step": "ask_email"})
        await message.answer("–û—Å—Ç–∞–≤—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π email:")

    elif step == "ask_email":
        update_user(user_id, {"email": message.text, "step": "ask_gender"})
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add("–ú—É–∂—á–∏–Ω–∞", "–ñ–µ–Ω—â–∏–Ω–∞")
        await message.answer("–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª:", reply_markup=kb)

    elif step == "ask_gender":
        update_user(user_id, {"gender": message.text, "step": "ask_age"})
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add("–¥–æ 20", "20-30", "31-45", "46-60", "–±–æ–ª—å—à–µ 60")
        await message.answer("–£–∫–∞–∂–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:", reply_markup=kb)

    elif step == "ask_age":
        update_user(user_id, {"age": message.text, "step": "ask_field"})
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add("–ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å", "—Å–≤–æ–π –±–∏–∑–Ω–µ—Å", "—Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä")
        kb.add("—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –≤ –Ω–∞–π–º–µ", "—Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –≤ –Ω–∞–π–º–µ", "–Ω–µ —Ä–∞–±–æ—Ç–∞—é")
        await message.answer("–í—ã–±–µ—Ä–∏ —Å—Ñ–µ—Ä—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:", reply_markup=kb)

    elif step == "ask_field":
        update_user(user_id, {"field": message.text, "step": "check_sub"})
        await message.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª üëâ https://t.me/merkulyevy_live_evolution_space\n\n–ö–æ–≥–¥–∞ –ø–æ–¥–ø–∏—à–µ—à—å—Å—è ‚Äî –Ω–∞–ø–∏—à–∏ '–ì–æ—Ç–æ–≤–æ'.")

    elif step == "check_sub":
        if message.text.lower() == "–≥–æ—Ç–æ–≤–æ":
            if await check_subscription(user_id):
                update_user(user_id, {"step": "lesson"})
                await message.answer(lessons[1]["text"], reply_markup=types.ReplyKeyboardRemove())
            else:
                await message.answer("‚ùóÔ∏è –Ø –Ω–µ –≤–∏–∂—É –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–¥–ø–∏—à–∏—Å—å –∏ –Ω–∞–ø–∏—à–∏ '–ì–æ—Ç–æ–≤–æ'.")
        else:
            await message.answer("–ù–∞–ø–∏—à–∏ '–ì–æ—Ç–æ–≤–æ', –∫–æ–≥–¥–∞ –ø–æ–¥–ø–∏—à–µ—à—å—Å—è.")

    elif step == "lesson":
        current = user["current"]
        update_user(user_id, {"answers": {**user["answers"], str(current): message.text}})
        next_lesson = current + 1
        if next_lesson in lessons:
            update_user(user_id, {"current": next_lesson})
            await message.answer(lessons[next_lesson]["text"])
        else:
            update_user(user_id, {"step": "done"})
            await message.answer("üéâ –¢—ã –ø—Ä–æ—à—ë–ª –≤—Å–µ —É—Ä–æ–∫–∏! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ.")

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(dp.start_polling(bot))
    loop.run_forever()

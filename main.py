import os
import asyncpg
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
)

API_TOKEN = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")
CHANNEL_USERNAME = "@merkulyevy_live_evolution_space"
ADMIN_IDS = [123456789, 987654321]  # –≤—Å—Ç–∞–≤—å —Å—é–¥–∞ ID –∞–¥–º–∏–Ω–æ–≤

bot = Bot(token=API_TOKEN, parse_mode="Markdown")
dp = Dispatcher(bot)

# ---------- –ë–î ----------
async def create_tables():
    conn = await asyncpg.connect(DATABASE_URL)
    await conn.execute("""
    CREATE TABLE IF NOT EXISTS users (
        user_id BIGINT PRIMARY KEY,
        step TEXT,
        name TEXT,
        contact TEXT,
        email TEXT,
        gender TEXT,
        age TEXT,
        work_area TEXT,
        current INT DEFAULT 1
    );
    """)
    await conn.execute("""
    CREATE TABLE IF NOT EXISTS answers (
        id SERIAL PRIMARY KEY,
        user_id BIGINT REFERENCES users(user_id),
        lesson_id INT,
        answer TEXT
    );
    """)
    await conn.close()

async def get_user(user_id):
    conn = await asyncpg.connect(DATABASE_URL)
    row = await conn.fetchrow("SELECT * FROM users WHERE user_id=$1", user_id)
    await conn.close()
    return dict(row) if row else None

async def update_user(user_id, **kwargs):
    conn = await asyncpg.connect(DATABASE_URL)
    user = await get_user(user_id)
    if not user:
        await conn.execute(
            "INSERT INTO users (user_id, step, current) VALUES ($1, $2, $3)",
            user_id, kwargs.get("step", "ask_name"), kwargs.get("current", 1)
        )
    else:
        sets, values = [], []
        for i, (k, v) in enumerate(kwargs.items(), start=1):
            sets.append(f"{k} = ${i+1}")
            values.append(v)
        query = f"UPDATE users SET {', '.join(sets)} WHERE user_id=$1"
        await conn.execute(query, user_id, *values)
    await conn.close()

async def save_answer(user_id, lesson_id, answer):
    conn = await asyncpg.connect(DATABASE_URL)
    await conn.execute(
        "INSERT INTO answers (user_id, lesson_id, answer) VALUES ($1, $2, $3)",
        user_id, lesson_id, answer
    )
    await conn.close()

# ---------- –£–†–û–ö–ò ----------
lessons = {
    1: {"text": "üìΩ –£—Ä–æ–∫ 1...\n\nüìù –í–æ–ø—Ä–æ—Å: ..."},
    2: {"text": "üìΩ –£—Ä–æ–∫ 2...\n\nüìù –í–æ–ø—Ä–æ—Å: ..."},
    3: {"text": "üìΩ –£—Ä–æ–∫ 3...\n\nüìù –í–æ–ø—Ä–æ—Å: ..."}
}

async def send_lesson(user_id, lesson_id):
    if lesson_id in lessons:
        await bot.send_message(user_id, lessons[lesson_id]["text"])
    else:
        await bot.send_message(user_id, "–ö—É—Ä—Å –∑–∞–≤–µ—Ä—à—ë–Ω üéâ")

# ---------- –ü–û–î–ü–ò–°–ö–ê ----------
async def check_subscription(user_id):
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
        return member.status in ["member", "administrator", "creator"]
    except:
        return False

# ---------- –°–¢–ê–†–¢ ----------
@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    user = await get_user(message.from_user.id)
    if not user:
        # –Ω–æ–≤—ã–π ‚Üí –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        keyboard.add(KeyboardButton("–ù–∞—á–∞—Ç—å"))
        await bot.send_message(
            message.chat.id,
            "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç –¥–ª—è –∫—É—Ä—Å–∞. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
            reply_markup=keyboard
        )
    else:
        await bot.send_message(message.chat.id, "–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º üöÄ")

@dp.message_handler(lambda m: m.text == "–ù–∞—á–∞—Ç—å")
async def handle_begin(message: types.Message):
    user_id = message.from_user.id
    await update_user(user_id, step="ask_name", current=1)
    await bot.send_message(
        message.chat.id,
        "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
        reply_markup=ReplyKeyboardRemove()
    )

# ---------- –ê–ù–ö–ï–¢–ê ----------
@dp.message_handler()
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    user = await get_user(user_id)
    if not user:
        await update_user(user_id, step="ask_name")
        return await message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")

    step = user["step"]

    if step == "ask_name":
        await update_user(user_id, name=message.text.strip(), step="ask_contact")
        await message.answer("–û—Å—Ç–∞–≤—å –∫–æ–Ω—Ç–∞–∫—Ç: —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –Ω–∏–∫ –≤ Telegram.")

    elif step == "ask_contact":
        await update_user(user_id, contact=message.text.strip(), step="ask_email")
        await message.answer("–ò –ø–æ—Å–ª–µ–¥–Ω–µ–µ ‚Äî —Ç–≤–æ–π email:")

    elif step == "ask_email":
        await update_user(user_id, email=message.text.strip(), step="waiting_subscription")
        if await check_subscription(user_id):
            await update_user(user_id, step="lesson", current=1)
            await send_lesson(user_id, 1)
        else:
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton("üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url="https://t.me/merkulyevy_live_evolution_space"))
            keyboard.add(InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription"))
            await message.answer(
                "‚ö†Ô∏è –ß—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –∫—É—Ä—Å, –Ω—É–∂–Ω–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º. –ü–æ–¥–ø–∏—à–∏—Å—å –∏ –Ω–∞–∂–º–∏ ¬´–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è¬ª.",
                reply_markup=keyboard
            )

    elif step == "lesson":
        current = user["current"]
        await save_answer(user_id, current, message.text.strip())
        await update_user(user_id, current=current+1)
        await send_lesson(user_id, current+1)

# ---------- –ö–ù–û–ü–ö–ò ----------
@dp.callback_query_handler(lambda c: c.data == "check_subscription")
async def process_subscription(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if await check_subscription(user_id):
        await update_user(user_id, step="lesson", current=1)
        await bot.send_message(user_id, "–û—Ç–ª–∏—á–Ω–æ, –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚ú®")
        await send_lesson(user_id, 1)
    else:
        await bot.send_message(user_id, "–ü–æ–∫–∞ –Ω–µ –≤–∏–∂—É –ø–æ–¥–ø–∏—Å–∫–∏ ü§î")

# ---------- –í–´–ì–†–£–ó–ö–ê ----------
@dp.message_handler(commands=["export"])
async def export_cmd(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
    conn = await asyncpg.connect(DATABASE_URL)
    rows = await conn.fetch("""
        SELECT u.user_id, u.name, u.email, a.lesson_id, a.answer
        FROM users u
        LEFT JOIN answers a ON u.user_id = a.user_id
        ORDER BY u.user_id, a.lesson_id
    """)
    await conn.close()
    text = "–≠–∫—Å–ø–æ—Ä—Ç:\n\n"
    for r in rows:
        text += f"{r['name']} ({r['email']}) | –£—Ä–æ–∫ {r['lesson_id']}: {r['answer']}\n"
    await message.answer(text or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

# ---------- –ó–ê–ü–£–°–ö ----------
if __name__ == "__main__":
    import asyncio
    loop = asyncio.get_event_loop()
    loop.run_until_complete(create_tables())
    executor.start_polling(dp, skip_updates=True)

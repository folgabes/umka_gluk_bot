import os
import json
from aiogram import Bot, Dispatcher, executor, types
import asyncpg

API_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

CHANNEL_USERNAME = "@merkulyevy_live_evolution_space"

# —Å–ø–∏—Å–æ–∫ –∞–π–¥–∏—à–Ω–∏–∫–æ–≤ –∞–¥–º–∏–Ω–æ–≤
ADMINS = [123456789, 987654321]  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ id

# ----------- —É—Ä–æ–∫–∏ -----------
lessons = {
    1: {
        "question": "–í—Å–ø–æ–º–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫–∏–µ –ø—Ä–µ–æ–¥–æ–ª—ë–Ω–Ω—ã–µ —Ç–æ–±–æ–π —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —É–∫—Ä–µ–ø–∏–ª–∏ —Ç–≤–æ—ë –∑–¥–æ—Ä–æ–≤—å–µ –∏ –ø–æ–º–æ–≥–ª–∏ –æ–±—Ä–µ—Å—Ç–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Å–∏–ª—É –∏ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ?",
        "text": "üìΩ –£—Ä–æ–∫ 1. –ó–¥–æ—Ä–æ–≤—å–µ –º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ –¥–µ–Ω—å–≥–∏\n\n–ü–æ—Å–º–æ—Ç—Ä–∏ –≤–∏–¥–µ–æ:\n"
                "üîó [Rutube](https://rutube.ru/video/private/438c67c0e3510477ba92ef1c9cbda807/?p=m8ZK3IF63nq3U8aiuKBfyQ)\n"
                "üîó [YouTube](https://youtube.com/shorts/_uTHQopErp4)\n\n"
                "üìù –ó–∞–¥–∞–Ω–∏–µ:\n–í—Å–ø–æ–º–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫–∏–µ –ø—Ä–µ–æ–¥–æ–ª—ë–Ω–Ω—ã–µ —Ç–æ–±–æ–π —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —É–∫—Ä–µ–ø–∏–ª–∏ —Ç–≤–æ—ë –∑–¥–æ—Ä–æ–≤—å–µ –∏ –ø–æ–º–æ–≥–ª–∏ –æ–±—Ä–µ—Å—Ç–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Å–∏–ª—É –∏ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ?"
    },
    2: {
        "question": "–†–∞—Å—Å–∫–∞–∂–∏ –æ –º–æ–º–µ–Ω—Ç–∞—Ö –≤ —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏, –∫–æ–≥–¥–∞ –¥–µ–Ω—å–≥–∏ –ø—Ä–∏–Ω–µ—Å–ª–∏ —Ç–µ–±–µ –Ω–∞—Å—Ç–æ—è—â–µ–µ —Å—á–∞—Å—Ç—å–µ –∏ —Ä–∞–¥–æ—Å—Ç—å. –ë—ã–ª–∏ –ª–∏ —ç–ø–∏–∑–æ–¥—ã, –∫–æ–≥–¥–∞ –æ–±–ª–∞–¥–∞–Ω–∏–µ –∏–º–∏ —Å—Ç–∞–ª–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –æ–≥–æ—Ä—á–µ–Ω–∏–π –∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏–π?",
        "text": "üìΩ –£—Ä–æ–∫ 2. –î–µ–Ω—å–≥–∏ –º–æ–≥—É—Ç —Å–ø–∞—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ä–æ—Å—Ç–∏ –∏ —Å–º–µ—Ä—Ç–∏\n\n–ü–æ—Å–º–æ—Ç—Ä–∏ –≤–∏–¥–µ–æ:\n"
                "üîó [Rutube](https://rutube.ru/video/private/a455fedbc14d98eeac76e09dec70aaa8/?p=O-rFwwAB4tvSNHOJK5gDgw)\n"
                "üîó [YouTube](https://youtube.com/shorts/6KOFfzMXeBo)\n\n"
                "üìù –ó–∞–¥–∞–Ω–∏–µ:\n–†–∞—Å—Å–∫–∞–∂–∏ –æ –º–æ–º–µ–Ω—Ç–∞—Ö –≤ —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏, –∫–æ–≥–¥–∞ –¥–µ–Ω—å–≥–∏ –ø—Ä–∏–Ω–µ—Å–ª–∏ —Ç–µ–±–µ –Ω–∞—Å—Ç–æ—è—â–µ–µ —Å—á–∞—Å—Ç—å–µ –∏ —Ä–∞–¥–æ—Å—Ç—å. "
                "–ë—ã–ª–∏ –ª–∏ —ç–ø–∏–∑–æ–¥—ã, –∫–æ–≥–¥–∞ –æ–±–ª–∞–¥–∞–Ω–∏–µ –∏–º–∏ —Å—Ç–∞–ª–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –æ–≥–æ—Ä—á–µ–Ω–∏–π –∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏–π?"
    },
    3: {
        "question": "–ü–æ–¥–µ–ª–∏—Å—å –∏—Å—Ç–æ—Ä–∏–µ–π –æ —Ç–æ–º, –∫–∞–∫ —Ç—ã —Ä–∞—Å–ø–æ—Ä—è–¥–∏–ª—Å—è(–∞—Å—å) —Å–ª—É—á–∞–π–Ω–æ –æ–±—Ä–µ—Ç—ë–Ω–Ω—ã–º–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏. –ö–∞–∫–æ–π –ø–æ–ª–µ–∑–Ω—ã–π –≤—ã–≤–æ–¥ —Ç—ã —Å–¥–µ–ª–∞–ª(–∞) –∏–∑ —ç—Ç–æ–≥–æ –æ–ø—ã—Ç–∞?",
        "text": "üìΩ –£—Ä–æ–∫ 3. –õ—ë–≥–∫–∏–µ –¥–µ–Ω—å–≥–∏ –ª–µ–≥–∫–æ –¥–∞—é—Ç—Å—è\n\n–ü–æ—Å–º–æ—Ç—Ä–∏ –≤–∏–¥–µ–æ:\n"
                "üîó [Rutube](https://rutube.ru/video/private/ad9e2b3c210d21cd23712045627dab40/?p=Ib29o4dCFybWBwITaw8EcA)\n"
                "üîó [YouTube](https://youtube.com/shorts/nzpJTNZseH8)\n\n"
                "üìù –ó–∞–¥–∞–Ω–∏–µ:\n–ü–æ–¥–µ–ª–∏—Å—å –∏—Å—Ç–æ—Ä–∏–µ–π –æ —Ç–æ–º, –∫–∞–∫ —Ç—ã —Ä–∞—Å–ø–æ—Ä—è–¥–∏–ª—Å—è(–∞—Å—å) —Å–ª—É—á–∞–π–Ω–æ –æ–±—Ä–µ—Ç—ë–Ω–Ω—ã–º–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏. "
                "–ö–∞–∫–æ–π –ø–æ–ª–µ–∑–Ω—ã–π –≤—ã–≤–æ–¥ —Ç—ã —Å–¥–µ–ª–∞–ª(–∞) –∏–∑ —ç—Ç–æ–≥–æ –æ–ø—ã—Ç–∞?"
    },
    4: {
        "question": "–ö–∞–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è, –Ω–∞ —Ç–≤–æ–π –≤–∑–≥–ª—è–¥, —É–±–µ—Ä–µ–≥—É—Ç —Ç–µ–±—è –æ—Ç –ø–æ—Ç–µ—Ä–∏ –¥–µ–Ω–µ–≥ –∏ –ø–æ–º–æ–≥—É—Ç –∑–∞—â–∏—Ç–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø—Ä–∏ —Ö—Ä–∞–Ω–µ–Ω–∏–∏?",
        "text": "üìΩ –£—Ä–æ–∫ 4. –î–µ–Ω—å–≥–∏ –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–µ–∑ —Ä–∏—Å–∫–∞ –ø–æ—Ç–µ—Ä—è—Ç—å\n\n–ü–æ—Å–º–æ—Ç—Ä–∏ –≤–∏–¥–µ–æ:\n"
                "üîó [Rutube](https://rutube.ru/video/private/17cda71a3427edf4f8210bff14862bcd/?p=mC_3osWPMwJgbZ1mICPjOQ)\n"
                "üîó [YouTube](https://youtube.com/shorts/nzpJTNZseH8)\n\n"
                "üìù –ó–∞–¥–∞–Ω–∏–µ:\n–ö–∞–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è, –Ω–∞ —Ç–≤–æ–π –≤–∑–≥–ª—è–¥, —É–±–µ—Ä–µ–≥—É—Ç —Ç–µ–±—è –æ—Ç –ø–æ—Ç–µ—Ä–∏ –¥–µ–Ω–µ–≥ –∏ –ø–æ–º–æ–≥—É—Ç –∑–∞—â–∏—Ç–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø—Ä–∏ —Ö—Ä–∞–Ω–µ–Ω–∏–∏?"
    },
    5: {
        "question": "–ö–∞–∫–∏–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞—é—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —á–µ–ª–æ–≤–µ–∫—É, –µ—Å–ª–∏ —É –Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–µ–Ω—å–≥–∏?",
        "text": "üìΩ –£—Ä–æ–∫ 5. –ö—É–ø–∏ —Å–µ–π—á–∞—Å, –∑–∞–ø–ª–∞—Ç–∏—à—å –ø–æ—Ç–æ–º\n\n–ü–æ—Å–º–æ—Ç—Ä–∏ –≤–∏–¥–µ–æ:\n"
                "üîó [Rutube](https://rutube.ru/video/private/c190ba709164a4e7fe3f0c6be9ffd5d9/?p=OSf95L2cKiR_FfNmC9xzrg)\n"
                "üîó [YouTube](https://youtube.com/shorts/wkbbH1NzmdY)\n\n"
                "üìù –ó–∞–¥–∞–Ω–∏–µ:\n–ö–∞–∫–∏–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞—é—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —á–µ–ª–æ–≤–µ–∫—É, –µ—Å–ª–∏ —É –Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–µ–Ω—å–≥–∏?"
    },
}

# ----------- –±–∞–∑–∞ Postgres -----------

async def init_db():
    conn = await asyncpg.connect(
        host=os.getenv("PGHOST"),
        user=os.getenv("PGUSER"),
        password=os.getenv("PGPASSWORD"),
        database=os.getenv("PGDATABASE"),
        port=os.getenv("PGPORT"),
    )
    await conn.execute("""
    CREATE TABLE IF NOT EXISTS users (
        id BIGINT PRIMARY KEY,
        name TEXT,
        email TEXT,
        gender TEXT,
        age_group TEXT,
        sphere TEXT,
        answers JSONB DEFAULT '{}'::jsonb,
        current INT DEFAULT 1
    )
    """)
    await conn.close()

async def get_user(user_id):
    conn = await asyncpg.connect(
        host=os.getenv("PGHOST"),
        user=os.getenv("PGUSER"),
        password=os.getenv("PGPASSWORD"),
        database=os.getenv("PGDATABASE"),
        port=os.getenv("PGPORT"),
    )
    row = await conn.fetchrow("SELECT * FROM users WHERE id=$1", user_id)
    if not row:
        await conn.execute("INSERT INTO users (id, answers, current) VALUES ($1, '{}'::jsonb, 1)", user_id)
        row = await conn.fetchrow("SELECT * FROM users WHERE id=$1", user_id)
    await conn.close()
    return dict(row)

async def update_user(user_id, **kwargs):
    conn = await asyncpg.connect(
        host=os.getenv("PGHOST"),
        user=os.getenv("PGUSER"),
        password=os.getenv("PGPASSWORD"),
        database=os.getenv("PGDATABASE"),
        port=os.getenv("PGPORT"),
    )
    for key, value in kwargs.items():
        if key == "answers" and value is not None:
            await conn.execute(
                "UPDATE users SET answers = answers || $1::jsonb WHERE id=$2",
                json.dumps(value),
                user_id,
            )
        else:
            await conn.execute(f"UPDATE users SET {key}=$1 WHERE id=$2", value, user_id)
    await conn.close()

# ----------- —ç–∫—Å–ø–æ—Ä—Ç -----------

@dp.message_handler(commands=["export"])
async def export_data(message: types.Message):
    if message.from_user.id not in ADMINS:
        await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç.")
        return
    conn = await asyncpg.connect(
        host=os.getenv("PGHOST"),
        user=os.getenv("PGUSER"),
        password=os.getenv("PGPASSWORD"),
        database=os.getenv("PGDATABASE"),
        port=os.getenv("PGPORT"),
    )
    rows = await conn.fetch("SELECT * FROM users")
    await conn.close()
    data = [dict(r) for r in rows]
    text = json.dumps(data, ensure_ascii=False, indent=2)
    file = types.InputFile.from_buffer(text.encode("utf-8"), filename="export.json")
    await message.answer_document(file, caption="üì§ –î–∞–Ω–Ω—ã–µ –≤—ã–≥—Ä—É–∂–µ–Ω—ã")

# ----------- —Å—Ç–∞—Ä—Ç –∏ –∞–Ω–∫–µ—Ç–∞ -----------

@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    await init_db()
    await get_user(message.from_user.id)
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(types.KeyboardButton("üöÄ –ù–∞—á–∞—Ç—å"))
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç –¥–ª—è –∫—É—Ä—Å–∞. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", reply_markup=kb)

@dp.message_handler(lambda m: m.text == "üöÄ –ù–∞—á–∞—Ç—å")
async def start_survey(message: types.Message):
    await update_user(message.from_user.id, current=0)
    await message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    await update_user(message.from_user.id, step="ask_name")

@dp.message_handler()
async def handle_message(message: types.Message):
    user = await get_user(message.from_user.id)
    step = user.get("step")

    if step == "ask_name":
        await update_user(message.from_user.id, name=message.text, step="ask_email")
        await message.answer("–£–∫–∞–∂–∏ —Å–≤–æ–π email:")
    elif step == "ask_email":
        await update_user(message.from_user.id, email=message.text, step="ask_gender")
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add("–ú—É–∂—á–∏–Ω–∞", "–ñ–µ–Ω—â–∏–Ω–∞")
        await message.answer("–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª:", reply_markup=kb)
    elif step == "ask_gender":
        await update_user(message.from_user.id, gender=message.text, step="ask_age")
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add("–¥–æ 20", "20-30", "31-45", "46-60", "–±–æ–ª—å—à–µ 60")
        await message.answer("–¢–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç?", reply_markup=kb)
    elif step == "ask_age":
        await update_user(message.from_user.id, age_group=message.text, step="ask_sphere")
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add("–ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å", "—Å–≤–æ–π –±–∏–∑–Ω–µ—Å", "—Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä", "—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –≤ –Ω–∞–π–º–µ", "—Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –≤ –Ω–∞–π–º–µ", "–Ω–µ —Ä–∞–±–æ—Ç–∞—é")
        await message.answer("–í—ã–±–µ—Ä–∏ —Å—Ñ–µ—Ä—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:", reply_markup=kb)
    elif step == "ask_sphere":
        await update_user(message.from_user.id, sphere=message.text, step="lessons", current=1)
        await message.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–π–¥—ë–º –∫ —É—Ä–æ–∫–∞–º.", reply_markup=types.ReplyKeyboardRemove())
        await message.answer(lessons[1]["text"])
    elif step == "lessons":
        current = user.get("current", 1)
        await update_user(message.from_user.id, answers={str(current): message.text})
        next_lesson = current + 1
        if next_lesson in lessons:
            await update_user(message.from_user.id, current=next_lesson)
            await message.answer(lessons[next_lesson]["text"])
        else:
            await message.answer("üéâ –¢—ã –ø—Ä–æ—à—ë–ª –≤—Å–µ —É—Ä–æ–∫–∏! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ.")
            await update_user(message.from_user.id, step="done")

# ----------- –∑–∞–ø—É—Å–∫ -----------

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)

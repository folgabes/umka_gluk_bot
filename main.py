import os
import json
import asyncpg
from aiogram import Bot, Dispatcher, executor, types

API_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

CHANNEL_USERNAME = "@merkulyevy_live_evolution_space"


# ------------------- DB -------------------
async def init_db():
    conn = await asyncpg.connect(
        host=os.getenv("PGHOST"),
        user=os.getenv("PGUSER"),
        password=os.getenv("PGPASSWORD"),
        database=os.getenv("PGDATABASE"),
        port=os.getenv("PGPORT"),
    )
    await conn.execute("""
    CREATE TABLE IF NOT EXISTS users (
        id BIGINT PRIMARY KEY,
        name TEXT,
        email TEXT,
        gender TEXT,
        age_group TEXT,
        sphere TEXT,
        answers JSONB DEFAULT '{}'::jsonb,
        current INT DEFAULT 1,
        step TEXT DEFAULT 'ask_name'
    )
    """)
    await conn.close()

async def get_user(user_id):
    conn = await asyncpg.connect(
        host=os.getenv("PGHOST"),
        user=os.getenv("PGUSER"),
        password=os.getenv("PGPASSWORD"),
        database=os.getenv("PGDATABASE"),
        port=os.getenv("PGPORT"),
    )
    row = await conn.fetchrow("SELECT * FROM users WHERE id=$1", user_id)
    if not row:
        await conn.execute("""
            INSERT INTO users (id, answers, current, step) 
            VALUES ($1, '{}'::jsonb, 1, 'ask_name')
        """, user_id)
        row = await conn.fetchrow("SELECT * FROM users WHERE id=$1", user_id)
    await conn.close()
    return dict(row)

async def update_user(user_id, **kwargs):
    conn = await asyncpg.connect(
        host=os.getenv("PGHOST"),
        user=os.getenv("PGUSER"),
        password=os.getenv("PGPASSWORD"),
        database=os.getenv("PGDATABASE"),
        port=os.getenv("PGPORT"),
    )
    for key, value in kwargs.items():
        if key == "answers" and value is not None:
            await conn.execute(
                "UPDATE users SET answers = answers || $1::jsonb WHERE id=$2",
                json.dumps(value),
                user_id,
            )
        else:
            await conn.execute(f"UPDATE users SET {key}=$1 WHERE id=$2", value, user_id)
    await conn.close()


# ------------------- BOT -------------------
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    user = await get_user(message.from_user.id)

    if user["name"]:  
        # —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ ‚Üí –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–æ–≥–æ –º–µ—Å—Ç–∞, –≥–¥–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è
        await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã –†–∞–¥ —Ç–µ–±—è —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å. –ü—Ä–æ–¥–æ–ª–∂–∏–º?")
    else:
        # –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add("–ù–∞—á–∞—Ç—å")
        await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç –¥–ª—è –∫—É—Ä—Å–∞. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", reply_markup=keyboard)


@dp.message_handler(lambda msg: msg.text == "–ù–∞—á–∞—Ç—å")
async def start_registration(message: types.Message):
    await update_user(message.from_user.id, step="ask_name")
    # —É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    await message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=types.ReplyKeyboardRemove())


# —Ç—É—Ç –ø–æ–π–¥—É—Ç –æ—Å—Ç–∞–ª—å–Ω—ã–µ —à–∞–≥–∏ (–∏–º—è ‚Üí email ‚Üí –ø–æ–ª ‚Üí –≤–æ–∑—Ä–∞—Å—Ç ‚Üí —Å—Ñ–µ—Ä–∞ ‚Üí —É—Ä–æ–∫–∏)
# ...


if __name__ == "__main__":
    import asyncio
    loop = asyncio.get_event_loop()
    loop.run_until_complete(init_db())
    executor.start_polling(dp, skip_updates=True)

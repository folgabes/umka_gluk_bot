from aiogram import Bot, Dispatcher, executor, types
import json
import os

API_TOKEN = os.getenv("BOT_TOKEN")  # –≤—Å—Ç–∞–≤—å —Ç–æ–∫–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ Railway
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

lessons = {
    1: {"text": "–£—Ä–æ–∫ 1: –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n\n–ß—Ç–æ —Ç–µ–±—è –ø—Ä–∏–≤–µ–ª–æ —Å—é–¥–∞?", "task": "–û—Ç–≤–µ—Ç—å –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ."},
    2: {"text": "–£—Ä–æ–∫ 2: –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ\n\n–ö–æ–≥–¥–∞ —Ç—ã –≤–ø–µ—Ä–≤—ã–µ –ø–æ–¥—É–º–∞–ª(–∞), —á—Ç–æ —Å –¥–µ–Ω—å–≥–∞–º–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫?", "task": "–ü–æ–¥–µ–ª–∏—Å—å –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º."},
    3: {"text": "–£—Ä–æ–∫ 3: –≥–ª—é–∫\n\n–û–ø–∏—à–∏ –æ–¥–∏–Ω —Å–≤–æ–π –≥–ª—é–∫ –ø—Ä–æ –¥–µ–Ω—å–≥–∏ ‚Äî —Å—Ç—ã–¥, —Å—Ç—Ä–∞—Ö, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ?", "task": "–ß—Ç–æ –≤—Å–ø–ª—ã–ª–æ?"}
    # –î–æ–±–∞–≤—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ —É—Ä–æ–∫–∏ –ø–æ –∂–µ–ª–∞–Ω–∏—é
}

DATA_FILE = "data.json"
ADMIN_ID = 123456789  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π user_id

def load_data():
    if not os.path.exists(DATA_FILE):
        return {}
    with open(DATA_FILE, "r") as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f, indent=2)

def get_user_progress(user_id):
    data = load_data()
    user_id = str(user_id)
    return data.get(user_id, {"answers": {}, "current": 1})

def update_user_progress(user_id, lesson_id, answer):
    data = load_data()
    user_id = str(user_id)
    if user_id not in data:
        data[user_id] = {"answers": {}, "current": 1}
    data[user_id]["answers"][str(lesson_id)] = answer
    data[user_id]["current"] = lesson_id + 1
    save_data(data)

@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    user = message.from_user
    progress = get_user_progress(user.id)
    current = progress["current"]
    if current > len(lessons):
        await message.answer("–¢—ã —É–∂–µ –ø—Ä–æ—à—ë–ª(–ª–∞) –∫—É—Ä—Å. –•–æ—á–µ—à—å –ø—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ? /reset")
    else:
        await send_lesson(user.id, current)

async def send_lesson(user_id, lesson_id):
    lesson = lessons.get(lesson_id)
    if lesson:
        text = f"{lesson['text']}\n\nüìù {lesson['task']}"
        await bot.send_message(user_id, text)
    else:
        await bot.send_message(user_id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª(–∞) –∫—É—Ä—Å! üéâ")

@dp.message_handler(commands=["reset"])
async def reset_user(message: types.Message):
    data = load_data()
    user_id = str(message.from_user.id)
    if user_id in data:
        del data[user_id]
        save_data(data)
    await message.answer("–ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω—É–ª—ë–Ω. –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")

@dp.message_handler(commands=["help"])
async def help_user(message: types.Message):
    await bot.send_message(ADMIN_ID, f"üÜò –ü–æ–º–æ—â—å –æ—Ç @{message.from_user.username} ({message.from_user.id})")
    await message.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫—É—Ä–∞—Ç–æ—Ä—É. –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π.")

@dp.message_handler()
async def handle_answer(message: types.Message):
    user_id = message.from_user.id
    progress = get_user_progress(user_id)
    current = progress["current"]
    if current > len(lessons):
        await message.answer("–ö—É—Ä—Å –∑–∞–≤–µ—Ä—à—ë–Ω. –ù–∞–ø–∏—à–∏ /reset, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
        return
    update_user_progress(user_id, current, message.text)
    await send_lesson(user_id, current + 1)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)

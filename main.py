from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
import asyncpg
import asyncio
import os

API_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_USERNAME = "@merkulyevy_live_evolution_space"

ADMINS = [123456789, 987654321]  # —Å—é–¥–∞ –ø–æ–¥—Å—Ç–∞–≤—å —Å–≤–æ–∏ id

bot = Bot(token=API_TOKEN, parse_mode="Markdown")
dp = Dispatcher(bot)

# ---------- –ë–ê–ó–ê –î–ê–ù–ù–´–• ----------
async def create_pool():
    return await asyncpg.create_pool(
        user=os.getenv("PGUSER"),
        password=os.getenv("PGPASSWORD"),
        database=os.getenv("PGDATABASE"),
        host=os.getenv("PGHOST"),
        port=os.getenv("PGPORT"),
    )

pool = None

async def init_db():
    async with pool.acquire() as conn:
        await conn.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id BIGINT PRIMARY KEY,
            name TEXT,
            contact TEXT,
            email TEXT,
            gender TEXT,
            age TEXT,
            work_area TEXT,
            step TEXT DEFAULT 'ask_name',
            current INT DEFAULT 1
        )
        """)
        await conn.execute("""
        CREATE TABLE IF NOT EXISTS answers (
            user_id BIGINT,
            lesson_num INT,
            answer TEXT,
            PRIMARY KEY(user_id, lesson_num)
        )
        """)

async def get_user(user_id):
    async with pool.acquire() as conn:
        row = await conn.fetchrow("SELECT * FROM users WHERE id=$1", user_id)
        if row:
            return dict(row)
        else:
            await conn.execute("INSERT INTO users(id) VALUES($1)", user_id)
            return {"id": user_id, "step": "ask_name", "current": 1}

async def update_user(user_id, **fields):
    async with pool.acquire() as conn:
        sets = ", ".join([f"{k}=${i+2}" for i, k in enumerate(fields.keys())])
        values = list(fields.values())
        await conn.execute(f"UPDATE users SET {sets} WHERE id=$1", user_id, *values)

async def save_answer(user_id, lesson_num, answer):
    async with pool.acquire() as conn:
        await conn.execute("""
        INSERT INTO answers(user_id, lesson_num, answer)
        VALUES ($1, $2, $3)
        ON CONFLICT (user_id, lesson_num) DO UPDATE SET answer=$3
        """, user_id, lesson_num, answer)

async def get_answers(user_id):
    async with pool.acquire() as conn:
        rows = await conn.fetch("SELECT lesson_num, answer FROM answers WHERE user_id=$1 ORDER BY lesson_num", user_id)
        return {str(r["lesson_num"]): r["answer"] for r in rows}

# ---------- –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ö–ò ----------
async def check_subscription(user_id):
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
        return member.status in ["member", "administrator", "creator"]
    except:
        return False

# ---------- –£–†–û–ö–ò ----------
lessons = {
    1: {
        "question": "–í—Å–ø–æ–º–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫–∏–µ –ø—Ä–µ–æ–¥–æ–ª—ë–Ω–Ω—ã–µ —Ç–æ–±–æ–π —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —É–∫—Ä–µ–ø–∏–ª–∏ —Ç–≤–æ—ë –∑–¥–æ—Ä–æ–≤—å–µ –∏ –ø–æ–º–æ–≥–ª–∏ –æ–±—Ä–µ—Å—Ç–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Å–∏–ª—É –∏ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ?",
        "text": "üìΩ –£—Ä–æ–∫ 1. –ó–¥–æ—Ä–æ–≤—å–µ –º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ –¥–µ–Ω—å–≥–∏\n\nüîó [Rutube](https://rutube.ru/video/private/438c67c0e3510477ba92ef1c9cbda807/?p=m8ZK3IF63nq3U8aiuKBfyQ)\nüîó [YouTube](https://youtube.com/shorts/_uTHQopErp4)\n\n---\n\nüìù –ó–∞–¥–∞–Ω–∏–µ:\n\n–í—Å–ø–æ–º–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫–∏–µ –ø—Ä–µ–æ–¥–æ–ª—ë–Ω–Ω—ã–µ —Ç–æ–±–æ–π —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —É–∫—Ä–µ–ø–∏–ª–∏ —Ç–≤–æ—ë –∑–¥–æ—Ä–æ–≤—å–µ –∏ –ø–æ–º–æ–≥–ª–∏ –æ–±—Ä–µ—Å—Ç–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Å–∏–ª—É –∏ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ?",
    },
    2: {
        "question": "–†–∞—Å—Å–∫–∞–∂–∏ –æ –º–æ–º–µ–Ω—Ç–∞—Ö –≤ —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏, –∫–æ–≥–¥–∞ –¥–µ–Ω—å–≥–∏ –ø—Ä–∏–Ω–µ—Å–ª–∏ —Ç–µ–±–µ –Ω–∞—Å—Ç–æ—è—â–µ–µ —Å—á–∞—Å—Ç—å–µ –∏ —Ä–∞–¥–æ—Å—Ç—å. –ë—ã–ª–∏ –ª–∏ —ç–ø–∏–∑–æ–¥—ã, –∫–æ–≥–¥–∞ –æ–±–ª–∞–¥–∞–Ω–∏–µ –∏–º–∏ —Å—Ç–∞–ª–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –æ–≥–æ—Ä—á–µ–Ω–∏–π –∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏–π?",
        "text": "üìΩ –£—Ä–æ–∫ 2. –î–µ–Ω—å–≥–∏ –º–æ–≥—É—Ç —Å–ø–∞—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ä–æ—Å—Ç–∏ –∏ —Å–º–µ—Ä—Ç–∏\n\nüîó [Rutube](https://rutube.ru/video/private/a455fedbc14d98eeac76e09dec70aaa8/?p=O-rFwwAB4tvSNHOJK5gDgw)\nüîó [YouTube](https://youtube.com/shorts/6KOFfzMXeBo)\n\n---\n\nüìù –ó–∞–¥–∞–Ω–∏–µ:\n\n–†–∞—Å—Å–∫–∞–∂–∏ –æ –º–æ–º–µ–Ω—Ç–∞—Ö –≤ —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏, –∫–æ–≥–¥–∞ –¥–µ–Ω—å–≥–∏ –ø—Ä–∏–Ω–µ—Å–ª–∏ —Ç–µ–±–µ –Ω–∞—Å—Ç–æ—è—â–µ–µ —Å—á–∞—Å—Ç—å–µ –∏ —Ä–∞–¥–æ—Å—Ç—å. –ë—ã–ª–∏ –ª–∏ —ç–ø–∏–∑–æ–¥—ã, –∫–æ–≥–¥–∞ –æ–±–ª–∞–¥–∞–Ω–∏–µ –∏–º–∏ —Å—Ç–∞–ª–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –æ–≥–æ—Ä—á–µ–Ω–∏–π –∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏–π?",
    },
    # ... —É—Ä–æ–∫–∏ 3‚Äì5 –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ ...
}

async def send_lesson(user_id, lesson_id):
    lesson = lessons.get(lesson_id)
    if lesson:
        await bot.send_message(user_id, lesson["text"])
    else:
        await bot.send_message(user_id, "üéâ –ö—É—Ä—Å –∑–∞–≤–µ—Ä—à—ë–Ω! –ù–∞–ø–∏—à–∏ /answers, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã.")

# ---------- –ö–û–ú–ê–ù–î–´ ----------
@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    await update_user(message.from_user.id, step="ask_name", current=1)
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –º–∏–Ω–∏-–∫—É—Ä—Å–∞ *–ì–ª—é–∫–∏ –ø—Ä–æ –¥–µ–Ω—å–≥–∏*.\n\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")

@dp.message_handler(commands=["reset"])
async def reset_cmd(message: types.Message):
    await update_user(message.from_user.id, step="ask_name", current=1)
    async with pool.acquire() as conn:
        await conn.execute("DELETE FROM answers WHERE user_id=$1", message.from_user.id)
    await message.answer("–ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω—É–ª—ë–Ω. –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")

@dp.message_handler(commands=["answers"])
async def answers_cmd(message: types.Message):
    answers = await get_answers(message.from_user.id)
    if not answers:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ ‚úçÔ∏è")
        return
    text = "üìí –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã:\n\n"
    for num, ans in answers.items():
        question = lessons[int(num)]["question"]
        text += f"üìΩ –£—Ä–æ–∫ {num}. {question}\n–û—Ç–≤–µ—Ç: {ans}\n\n"
    await message.answer(text)

@dp.message_handler(commands=["export"])
async def export_cmd(message: types.Message):
    if message.from_user.id not in ADMINS:
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤.")
        return
    async with pool.acquire() as conn:
        rows = await conn.fetch("SELECT user_id, lesson_num, answer FROM answers ORDER BY user_id, lesson_num")
    text = "üì¶ –í—Å–µ –æ—Ç–≤–µ—Ç—ã:\n\n"
    for r in rows:
        text += f"üë§ {r['user_id']} | –£—Ä–æ–∫ {r['lesson_num']} | {r['answer']}\n"
    await message.answer(text or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")

# ---------- –ê–ù–ö–ï–¢–ê ----------
gender_options = ["–ú—É–∂—á–∏–Ω–∞", "–ñ–µ–Ω—â–∏–Ω–∞"]
age_options = ["–¥–æ 20", "20-30", "31-45", "46-60", "–±–æ–ª—å—à–µ 60"]
work_options = ["–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å", "–°–≤–æ–π –±–∏–∑–Ω–µ—Å", "–§—Ä–∏–ª–∞–Ω—Å–µ—Ä",
                "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –≤ –Ω–∞–π–º–µ", "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –≤ –Ω–∞–π–º–µ", "–ù–µ —Ä–∞–±–æ—Ç–∞—é"]

@dp.message_handler()
async def handle_message(message: types.Message):
    user = await get_user(message.from_user.id)
    step = user["step"]

    if step == "ask_name":
        await update_user(message.from_user.id, name=message.text.strip(), step="ask_contact")
        await message.answer("–û—Å—Ç–∞–≤—å –∫–æ–Ω—Ç–∞–∫—Ç: —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –Ω–∏–∫ –≤ Telegram.")

    elif step == "ask_contact":
        await update_user(message.from_user.id, contact=message.text.strip(), step="ask_email")
        await message.answer("–ò –ø–æ—Å–ª–µ–¥–Ω–µ–µ ‚Äî —Ç–≤–æ–π email:")

    elif step == "ask_email":
        await update_user(message.from_user.id, email=message.text.strip(), step="ask_gender")
        kb = InlineKeyboardMarkup()
        for g in gender_options:
            kb.add(InlineKeyboardButton(g, callback_data=f"gender:{g}"))
        await message.answer("–ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å, –Ω–∞–ø–∏—à–∏ –ø–∞—Ä—É —Å–ª–æ–≤ –æ —Å–µ–±–µ.\n\n–¢—ã –º—É–∂—á–∏–Ω–∞ –∏–ª–∏ –∂–µ–Ω—â–∏–Ω–∞?", reply_markup=kb)

    elif step == "lesson":
        current = user["current"]
        await save_answer(message.from_user.id, current, message.text.strip())
        next_lesson = current + 1
        await update_user(message.from_user.id, current=next_lesson)
        await send_lesson(message.from_user.id, next_lesson)

# ---------- CALLBACK ----------
@dp.callback_query_handler(lambda c: c.data.startswith("gender:"))
async def process_gender(callback_query: CallbackQuery):
    gender = callback_query.data.split(":", 1)[1]
    await update_user(callback_query.from_user.id, gender=gender, step="ask_age")
    kb = InlineKeyboardMarkup()
    for a in age_options:
        kb.add(InlineKeyboardButton(a, callback_data=f"age:{a}"))
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("age:"))
async def process_age(callback_query: CallbackQuery):
    age = callback_query.data.split(":", 1)[1]
    await update_user(callback_query.from_user.id, age=age, step="ask_work_area")
    kb = InlineKeyboardMarkup()
    for w in work_options:
        kb.add(InlineKeyboardButton(w, callback_data=f"work:{w}"))
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Å—Ñ–µ—Ä—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("work:"))
async def process_work(callback_query: CallbackQuery):
    work = callback_query.data.split(":", 1)[1]
    await update_user(callback_query.from_user.id, work_area=work)
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —Å—Ä–∞–∑—É
    if await check_subscription(callback_query.from_user.id):
        await update_user(callback_query.from_user.id, step="lesson", current=1)
        await bot.send_message(callback_query.from_user.id, "üëç –ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –µ—Å—Ç—å. –ù–∞—á–∏–Ω–∞–µ–º –∫—É—Ä—Å!")
        await send_lesson(callback_query.from_user.id, 1)
    else:
        await update_user(callback_query.from_user.id, step="waiting_subscription")
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/merkulyevy_live_evolution_space"))
        kb.add(InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription"))
        await bot.send_message(callback_query.from_user.id,
                               "‚ö†Ô∏è –ß—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –∫—É—Ä—Å, –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª.\n\n–ü–æ–¥–ø–∏—à–∏—Å—å –∏ –Ω–∞–∂–º–∏ ¬´–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è¬ª.",
                               reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "check_subscription")
async def process_subscription(callback_query: CallbackQuery):
    if await check_subscription(callback_query.from_user.id):
        await update_user(callback_query.from_user.id, step="lesson", current=1)
        await bot.send_message(callback_query.from_user.id, "–û—Ç–ª–∏—á–Ω–æ, –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚ú® –ù–∞—á–∏–Ω–∞–µ–º –∫—É—Ä—Å!")
        await send_lesson(callback_query.from_user.id, 1)
    else:
        await bot.send_message(callback_query.from_user.id, "–ü–æ–∫–∞ –Ω–µ –≤–∏–∂—É –ø–æ–¥–ø–∏—Å–∫–∏ ü§î –ü—Ä–æ–≤–µ—Ä—å –µ—â—ë —Ä–∞–∑ –∏ –Ω–∞–∂–º–∏ ¬´–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è¬ª.")

# ---------- –ó–ê–ü–£–°–ö ----------
async def on_startup(dp):
    global pool
    pool = await create_pool()
    await init_db()

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(on_startup(dp))
    executor.start_polling(dp, skip_updates=True)

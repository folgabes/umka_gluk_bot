import os
import asyncpg
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

API_TOKEN = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")

bot = Bot(token=API_TOKEN, parse_mode="MarkdownV2")
dp = Dispatcher(bot)

CHANNEL_USERNAME = "@merkulyevy_live_evolution_space"

# ---------------- –£–†–û–ö–ò ----------------
lessons = {
    1: {
        "question": "–í—Å–ø–æ–º–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫–∏–µ –ø—Ä–µ–æ–¥–æ–ª—ë–Ω–Ω—ã–µ —Ç–æ–±–æ–π —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —É–∫—Ä–µ–ø–∏–ª–∏ —Ç–≤–æ—ë –∑–¥–æ—Ä–æ–≤—å–µ –∏ –ø–æ–º–æ–≥–ª–∏ –æ–±—Ä–µ—Å—Ç–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Å–∏–ª—É –∏ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ?",
        "text": "üìΩ –£—Ä–æ–∫ 1. –ó–¥–æ—Ä–æ–≤—å–µ –º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ –¥–µ–Ω—å–≥–∏\n\nüîó [Rutube](https://rutube.ru/video/private/438c67c0e3510477ba92ef1c9cbda807/?p=m8ZK3IF63nq3U8aiuKBfyQ)\nüîó [YouTube](https://youtube.com/shorts/_uTHQopErp4)\n\n---\n\nüìù –ó–∞–¥–∞–Ω–∏–µ:\n\n–í—Å–ø–æ–º–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫–∏–µ –ø—Ä–µ–æ–¥–æ–ª—ë–Ω–Ω—ã–µ —Ç–æ–±–æ–π —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —É–∫—Ä–µ–ø–∏–ª–∏ —Ç–≤–æ—ë –∑–¥–æ—Ä–æ–≤—å–µ –∏ –ø–æ–º–æ–≥–ª–∏ –æ–±—Ä–µ—Å—Ç–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Å–∏–ª—É –∏ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ?",
    },
    2: {
        "question": "–†–∞—Å—Å–∫–∞–∂–∏ –æ –º–æ–º–µ–Ω—Ç–∞—Ö –≤ —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏, –∫–æ–≥–¥–∞ –¥–µ–Ω—å–≥–∏ –ø—Ä–∏–Ω–µ—Å–ª–∏ —Ç–µ–±–µ –Ω–∞—Å—Ç–æ—è—â–µ–µ —Å—á–∞—Å—Ç—å–µ –∏ —Ä–∞–¥–æ—Å—Ç—å. –ë—ã–ª–∏ –ª–∏ —ç–ø–∏–∑–æ–¥—ã, –∫–æ–≥–¥–∞ –æ–±–ª–∞–¥–∞–Ω–∏–µ –∏–º–∏ —Å—Ç–∞–ª–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –æ–≥–æ—Ä—á–µ–Ω–∏–π –∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏–π?",
        "text": "üìΩ –£—Ä–æ–∫ 2. –î–µ–Ω—å–≥–∏ –º–æ–≥—É—Ç —Å–ø–∞—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ä–æ—Å—Ç–∏ –∏ —Å–º–µ—Ä—Ç–∏\n\nüîó [Rutube](https://rutube.ru/video/private/a455fedbc14d98eeac76e09dec70aaa8/?p=O-rFwwAB4tvSNHOJK5gDgw)\nüîó [YouTube](https://youtube.com/shorts/6KOFfzMXeBo)\n\n---\n\nüìù –ó–∞–¥–∞–Ω–∏–µ:\n\n–†–∞—Å—Å–∫–∞–∂–∏ –æ –º–æ–º–µ–Ω—Ç–∞—Ö –≤ —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏, –∫–æ–≥–¥–∞ –¥–µ–Ω—å–≥–∏ –ø—Ä–∏–Ω–µ—Å–ª–∏ —Ç–µ–±–µ –Ω–∞—Å—Ç–æ—è—â–µ–µ —Å—á–∞—Å—Ç—å–µ –∏ —Ä–∞–¥–æ—Å—Ç—å.\n\n–ë—ã–ª–∏ –ª–∏ —ç–ø–∏–∑–æ–¥—ã, –∫–æ–≥–¥–∞ –æ–±–ª–∞–¥–∞–Ω–∏–µ –∏–º–∏ —Å—Ç–∞–ª–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –æ–≥–æ—Ä—á–µ–Ω–∏–π –∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏–π?",
    },
    3: {
        "question": "–ü–æ–¥–µ–ª–∏—Å—å –∏—Å—Ç–æ—Ä–∏–µ–π –æ —Ç–æ–º, –∫–∞–∫ —Ç—ã —Ä–∞—Å–ø–æ—Ä—è–¥–∏–ª—Å—è(–∞—Å—å) —Å–ª—É—á–∞–π–Ω–æ –æ–±—Ä–µ—Ç—ë–Ω–Ω—ã–º–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏. –ö–∞–∫–æ–π –ø–æ–ª–µ–∑–Ω—ã–π –≤—ã–≤–æ–¥ —Ç—ã —Å–¥–µ–ª–∞–ª(–∞) –∏–∑ —ç—Ç–æ–≥–æ –æ–ø—ã—Ç–∞?",
        "text": "üìΩ –£—Ä–æ–∫ 3. –õ–µ–≥–∫–∏–µ –¥–µ–Ω—å–≥–∏ –ª–µ–≥–∫–æ –¥–∞—é—Ç—Å—è\n\nüîó [Rutube](https://rutube.ru/video/private/ad9e2b3c210d21cd23712045627dab40/?p=Ib29o4dCFybWBwITaw8EcA)\nüîó [YouTube](https://youtube.com/shorts/nzpJTNZseH8?feature=share)\n\n---\n\nüìù –ó–∞–¥–∞–Ω–∏–µ:\n\n–ü–æ–¥–µ–ª–∏—Å—å –∏—Å—Ç–æ—Ä–∏–µ–π –æ —Ç–æ–º, –∫–∞–∫ —Ç—ã —Ä–∞—Å–ø–æ—Ä—è–¥–∏–ª—Å—è(–∞—Å—å) —Å–ª—É—á–∞–π–Ω–æ –æ–±—Ä–µ—Ç—ë–Ω–Ω—ã–º–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏.\n\n–ö–∞–∫–æ–π –ø–æ–ª–µ–∑–Ω—ã–π –≤—ã–≤–æ–¥ —Ç—ã —Å–¥–µ–ª–∞–ª(–∞) –∏–∑ —ç—Ç–æ–≥–æ –æ–ø—ã—Ç–∞?",
    },
    4: {
        "question": "–ö–∞–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è, –Ω–∞ —Ç–≤–æ–π –≤–∑–≥–ª—è–¥, —É–±–µ—Ä–µ–≥—É—Ç —Ç–µ–±—è –æ—Ç –ø–æ—Ç–µ—Ä–∏ –¥–µ–Ω–µ–≥ –∏ –ø–æ–º–æ–≥—É—Ç –∑–∞—â–∏—Ç–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø—Ä–∏ —Ö—Ä–∞–Ω–µ–Ω–∏–∏?",
        "text": "üìΩ –£—Ä–æ–∫ 4. –î–µ–Ω—å–≥–∏ –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–µ–∑ —Ä–∏—Å–∫–∞ –ø–æ—Ç–µ—Ä—è—Ç—å\n\nüîó [Rutube](https://rutube.ru/video/private/17cda71a3427edf4f8210bff14862bcd/?p=mC_3osWPMwJgbZ1mICPjOQ)\nüîó [YouTube](https://youtube.com/shorts/nzpJTNZseH8?feature=share)\n\n---\n\nüìù –ó–∞–¥–∞–Ω–∏–µ:\n\n–ö–∞–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è, –Ω–∞ —Ç–≤–æ–π –≤–∑–≥–ª—è–¥, —É–±–µ—Ä–µ–≥—É—Ç —Ç–µ–±—è –æ—Ç –ø–æ—Ç–µ—Ä–∏ –¥–µ–Ω–µ–≥ –∏ –ø–æ–º–æ–≥—É—Ç –∑–∞—â–∏—Ç–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø—Ä–∏ —Ö—Ä–∞–Ω–µ–Ω–∏–∏?",
    },
    5: {
        "question": "–ö–∞–∫–∏–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞—é—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —á–µ–ª–æ–≤–µ–∫—É, –µ—Å–ª–∏ —É –Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–µ–Ω—å–≥–∏?",
        "text": "üìΩ –£—Ä–æ–∫ 5. –ö—É–ø–∏ —Å–µ–π—á–∞—Å, –∑–∞–ø–ª–∞—Ç–∏—à—å –ø–æ—Ç–æ–º\n\nüîó [Rutube](https://rutube.ru/video/private/c190ba709164a4e7fe3f0c6be9ffd5d9/?p=OSf95L2cKiR_FfNmC9xzrg)\nüîó [YouTube](https://youtube.com/shorts/wkbbH1NzmdY)\n\n---\n\nüìù –ó–∞–¥–∞–Ω–∏–µ:\n\n–ö–∞–∫–∏–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞—é—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —á–µ–ª–æ–≤–µ–∫—É, –µ—Å–ª–∏ —É –Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–µ–Ω—å–≥–∏?",
    },
}

# ---------------- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–î ----------------
async def init_db():
    conn = await asyncpg.connect(DATABASE_URL)
    await conn.execute("""
    CREATE TABLE IF NOT EXISTS users (
        user_id BIGINT PRIMARY KEY,
        name TEXT,
        contact TEXT,
        email TEXT,
        gender TEXT,
        age TEXT,
        work_area TEXT,
        step TEXT,
        current INTEGER
    )
    """)
    await conn.execute("""
    CREATE TABLE IF NOT EXISTS answers (
        id SERIAL PRIMARY KEY,
        user_id BIGINT,
        lesson INTEGER,
        answer TEXT
    )
    """)
    await conn.close()

# ---------------- –£–¢–ò–õ–ò–¢–´ ----------------
async def get_user(user_id):
    conn = await asyncpg.connect(DATABASE_URL)
    user = await conn.fetchrow("SELECT * FROM users WHERE user_id=$1", user_id)
    await conn.close()
    return dict(user) if user else None

async def update_user(user_id, **fields):
    conn = await asyncpg.connect(DATABASE_URL)
    user = await conn.fetchrow("SELECT * FROM users WHERE user_id=$1", user_id)
    if user:
        sets = ", ".join([f"{k} = ${i+2}" for i, k in enumerate(fields.keys())])
        await conn.execute(f"UPDATE users SET {sets} WHERE user_id=$1", user_id, *fields.values())
    else:
        columns = ", ".join(["user_id"] + list(fields.keys()))
        placeholders = ", ".join([f"${i+1}" for i in range(len(fields) + 1)])
        await conn.execute(f"INSERT INTO users ({columns}) VALUES ({placeholders})", user_id, *([*fields.values()]))
    await conn.close()

async def save_answer(user_id, lesson, answer):
    conn = await asyncpg.connect(DATABASE_URL)
    await conn.execute("INSERT INTO answers (user_id, lesson, answer) VALUES ($1, $2, $3)", user_id, lesson, answer)
    await conn.close()

async def get_answers(user_id):
    conn = await asyncpg.connect(DATABASE_URL)
    rows = await conn.fetch("SELECT lesson, answer FROM answers WHERE user_id=$1 ORDER BY lesson", user_id)
    await conn.close()
    return rows

async def check_subscription(user_id):
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
        return member.status in ["member", "administrator", "creator"]
    except:
        return False

# ---------------- –°–¢–ê–†–¢ ----------------
@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–ù–∞—á–∞—Ç—å", callback_data="start_course"))
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç –¥–ª—è –∫—É—Ä—Å–∞. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == "start_course")
async def process_start(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    await update_user(user_id, step="ask_name", current=1)
    await bot.send_message(user_id, "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")

# ---------------- –ê–ù–ö–ï–¢–ê ----------------
@dp.message_handler()
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    user = await get_user(user_id)
    if not user:
        return

    step = user.get("step")

    if step == "ask_name":
        await update_user(user_id, name=message.text.strip(), step="ask_contact")
        await message.answer("–û—Å—Ç–∞–≤—å –∫–æ–Ω—Ç–∞–∫—Ç: —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –Ω–∏–∫ –≤ Telegram.")

    elif step == "ask_contact":
        await update_user(user_id, contact=message.text.strip(), step="ask_email")
        await message.answer("–ò –ø–æ—Å–ª–µ–¥–Ω–µ–µ ‚Äî —Ç–≤–æ–π email:")

    elif step == "ask_email":
        await update_user(user_id, email=message.text.strip(), step="waiting_subscription")
        if await check_subscription(user_id):
            await update_user(user_id, step="lesson", current=1)
            await message.answer("–û—Ç–ª–∏—á–Ω–æ, —Ç—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω ‚ú® –ù–∞—á–∏–Ω–∞–µ–º –∫—É—Ä—Å!")
            await send_lesson(user_id, 1)
        else:
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton("üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/merkulyevy_live_evolution_space"))
            keyboard.add(InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription"))
            await message.answer("‚ö†Ô∏è –ß—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –∫—É—Ä—Å, –Ω—É–∂–Ω–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.\n\n–ü–æ–¥–ø–∏—à–∏—Å—å –∏ –Ω–∞–∂–º–∏ ¬´–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è¬ª.", reply_markup=keyboard)

    elif step == "lesson":
        current = user.get("current", 1)
        await save_answer(user_id, current, message.text.strip())
        next_lesson = current + 1
        await update_user(user_id, current=next_lesson)
        await send_lesson(user_id, next_lesson)

# ---------------- –ü–û–î–ü–ò–°–ö–ê ----------------
@dp.callback_query_handler(lambda c: c.data == "check_subscription")
async def process_subscription(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    if await check_subscription(user_id):
        await update_user(user_id, step="lesson", current=1)
        await bot.send_message(user_id, "–û—Ç–ª–∏—á–Ω–æ, –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚ú® –ù–∞—á–∏–Ω–∞–µ–º –∫—É—Ä—Å!")
        await send_lesson(user_id, 1)
    else:
        await bot.send_message(user_id, "–ü–æ–∫–∞ –Ω–µ –≤–∏–∂—É –ø–æ–¥–ø–∏—Å–∫–∏ ü§î –ü—Ä–æ–≤–µ—Ä—å –µ—â—ë —Ä–∞–∑ –∏ –Ω–∞–∂–º–∏ ¬´–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è¬ª.")

# ---------------- –£–†–û–ö–ò ----------------
async def send_lesson(user_id, lesson_id):
    if lesson_id > len(lessons):
        await bot.send_message(user_id, "–ö—É—Ä—Å –∑–∞–≤–µ—Ä—à—ë–Ω üéâ\n\n–ù–∞–ø–∏—à–∏ /answers, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã.")
        return
    lesson = lessons[lesson_id]
    await bot.send_message(user_id, lesson["text"])

# ---------------- –ö–û–ú–ê–ù–î–´ ----------------
@dp.message_handler(commands=["answers"])
async def answers_cmd(message: types.Message):
    rows = await get_answers(message.from_user.id)
    if not rows:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ ‚úçÔ∏è")
        return
    text = "üìí –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –ø–æ –∫—É—Ä—Å—É:\n\n"
    for row in rows:
        lesson_id, answer = row["lesson"], row["answer"]
        question = lessons[lesson_id]["question"]
        text += f"üìΩ –£—Ä–æ–∫ {lesson_id}. {question}\n–û—Ç–≤–µ—Ç: {answer}\n\n"
    await message.answer(text)

# ---------------- –ó–ê–ü–£–°–ö ----------------
if __name__ == "__main__":
    import asyncio
    loop = asyncio.get_event_loop()
    loop.run_until_complete(init_db())
    executor.start_polling(dp, skip_updates=True)

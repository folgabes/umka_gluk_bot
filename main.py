from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
import asyncio
import asyncpg
import os

API_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_USERNAME = "@merkulyevy_live_evolution_space"

# –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Postgres
async def create_pool():
    return await asyncpg.create_pool(
        user=os.getenv("PGUSER"),
        password=os.getenv("PGPASSWORD"),
        database=os.getenv("PGDATABASE"),
        host=os.getenv("PGHOST"),
        port=os.getenv("PGPORT"),
    )

pool = None

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

lessons = {
    1: {
        "question": "–í—Å–ø–æ–º–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫–∏–µ –ø—Ä–µ–æ–¥–æ–ª—ë–Ω–Ω—ã–µ —Ç–æ–±–æ–π —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —É–∫—Ä–µ–ø–∏–ª–∏ —Ç–≤–æ—ë –∑–¥–æ—Ä–æ–≤—å–µ –∏ –ø–æ–º–æ–≥–ª–∏ –æ–±—Ä–µ—Å—Ç–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Å–∏–ª—É –∏ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ?",
        "text": "üìΩ –£—Ä–æ–∫ 1. –ó–¥–æ—Ä–æ–≤—å–µ –º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ –¥–µ–Ω—å–≥–∏\n\n–ü–æ—Å–º–æ—Ç—Ä–∏ –≤–∏–¥–µ–æ:\nhttps://rutube.ru/video/private/438c67c0e3510477ba92ef1c9cbda807/?p=m8ZK3IF63nq3U8aiuKBfyQ\nhttps://youtube.com/shorts/_uTHQopErp4\n\n---\n\nüìù –ó–∞–¥–∞–Ω–∏–µ:\n\n–í—Å–ø–æ–º–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫–∏–µ –ø—Ä–µ–æ–¥–æ–ª—ë–Ω–Ω—ã–µ —Ç–æ–±–æ–π —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —É–∫—Ä–µ–ø–∏–ª–∏ —Ç–≤–æ—ë –∑–¥–æ—Ä–æ–≤—å–µ –∏ –ø–æ–º–æ–≥–ª–∏ –æ–±—Ä–µ—Å—Ç–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Å–∏–ª—É –∏ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ?",
    },
    2: {
        "question": "–†–∞—Å—Å–∫–∞–∂–∏ –æ –º–æ–º–µ–Ω—Ç–∞—Ö –≤ —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏, –∫–æ–≥–¥–∞ –¥–µ–Ω—å–≥–∏ –ø—Ä–∏–Ω–µ—Å–ª–∏ —Ç–µ–±–µ –Ω–∞—Å—Ç–æ—è—â–µ–µ —Å—á–∞—Å—Ç—å–µ –∏ —Ä–∞–¥–æ—Å—Ç—å. –ë—ã–ª–∏ –ª–∏ —ç–ø–∏–∑–æ–¥—ã, –∫–æ–≥–¥–∞ –æ–±–ª–∞–¥–∞–Ω–∏–µ –∏–º–∏ —Å—Ç–∞–ª–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –æ–≥–æ—Ä—á–µ–Ω–∏–π –∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏–π?",
        "text": "üìΩ –£—Ä–æ–∫ 2. –î–µ–Ω—å–≥–∏ –º–æ–≥—É—Ç —Å–ø–∞—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ä–æ—Å—Ç–∏ –∏ —Å–º–µ—Ä—Ç–∏\n\n–ü–æ—Å–º–æ—Ç—Ä–∏ –≤–∏–¥–µ–æ:\nhttps://rutube.ru/video/private/a455fedbc14d98eeac76e09dec70aaa8/?p=O-rFwwAB4tvSNHOJK5gDgw\nhttps://youtube.com/shorts/6KOFfzMXeBo\n\n---\n\nüìù –ó–∞–¥–∞–Ω–∏–µ:\n\n–†–∞—Å—Å–∫–∞–∂–∏ –æ –º–æ–º–µ–Ω—Ç–∞—Ö –≤ —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏, –∫–æ–≥–¥–∞ –¥–µ–Ω—å–≥–∏ –ø—Ä–∏–Ω–µ—Å–ª–∏ —Ç–µ–±–µ –Ω–∞—Å—Ç–æ—è—â–µ–µ —Å—á–∞—Å—Ç—å–µ –∏ —Ä–∞–¥–æ—Å—Ç—å.\n–ë—ã–ª–∏ –ª–∏ —ç–ø–∏–∑–æ–¥—ã, –∫–æ–≥–¥–∞ –æ–±–ª–∞–¥–∞–Ω–∏–µ –∏–º–∏ —Å—Ç–∞–ª–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –æ–≥–æ—Ä—á–µ–Ω–∏–π –∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏–π?",
    },
    3: {
        "question": "–ü–æ–¥–µ–ª–∏—Å—å –∏—Å—Ç–æ—Ä–∏–µ–π –æ —Ç–æ–º, –∫–∞–∫ —Ç—ã —Ä–∞—Å–ø–æ—Ä—è–¥–∏–ª—Å—è(–∞—Å—å) —Å–ª—É—á–∞–π–Ω–æ –æ–±—Ä–µ—Ç—ë–Ω–Ω—ã–º–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏. –ö–∞–∫–æ–π –ø–æ–ª–µ–∑–Ω—ã–π –≤—ã–≤–æ–¥ —Ç—ã —Å–¥–µ–ª–∞–ª(–∞) –∏–∑ —ç—Ç–æ–≥–æ –æ–ø—ã—Ç–∞?",
        "text": "üìΩ –£—Ä–æ–∫ 3. –õ–µ–≥–∫–∏–µ –¥–µ–Ω—å–≥–∏ –ª–µ–≥–∫–æ –¥–∞—é—Ç—Å—è\n\n–ü–æ—Å–º–æ—Ç—Ä–∏ –≤–∏–¥–µ–æ:\nhttps://rutube.ru/video/private/ad9e2b3c210d21cd23712045627dab40/?p=Ib29o4dCFybWBwITaw8EcA\nhttps://youtube.com/shorts/nzpJTNZseH8?feature=share\n\n---\n\nüìù –ó–∞–¥–∞–Ω–∏–µ:\n\n–ü–æ–¥–µ–ª–∏—Å—å –∏—Å—Ç–æ—Ä–∏–µ–π –æ —Ç–æ–º, –∫–∞–∫ —Ç—ã —Ä–∞—Å–ø–æ—Ä—è–¥–∏–ª—Å—è(–∞—Å—å) —Å–ª—É—á–∞–π–Ω–æ –æ–±—Ä–µ—Ç—ë–Ω–Ω—ã–º–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏.\n–ö–∞–∫–æ–π –ø–æ–ª–µ–∑–Ω—ã–π –≤—ã–≤–æ–¥ —Ç—ã —Å–¥–µ–ª–∞–ª(–∞) –∏–∑ —ç—Ç–æ–≥–æ –æ–ø—ã—Ç–∞?",
    },
    4: {
        "question": "–ö–∞–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è, –Ω–∞ —Ç–≤–æ–π –≤–∑–≥–ª—è–¥, —É–±–µ—Ä–µ–≥—É—Ç —Ç–µ–±—è –æ—Ç –ø–æ—Ç–µ—Ä–∏ –¥–µ–Ω–µ–≥ –∏ –ø–æ–º–æ–≥—É—Ç –∑–∞—â–∏—Ç–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø—Ä–∏ —Ö—Ä–∞–Ω–µ–Ω–∏–∏?",
        "text": "üìΩ –£—Ä–æ–∫ 4. –î–µ–Ω—å–≥–∏ –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–µ–∑ —Ä–∏—Å–∫–∞ –ø–æ—Ç–µ—Ä—è—Ç—å\n\n–ü–æ—Å–º–æ—Ç—Ä–∏ –≤–∏–¥–µ–æ:\nhttps://rutube.ru/video/private/17cda71a3427edf4f8210bff14862bcd/?p=mC_3osWPMwJgbZ1mICPjOQ\nhttps://youtube.com/shorts/nzpJTNZseH8?feature=share\n\n---\n\nüìù –ó–∞–¥–∞–Ω–∏–µ:\n\n–ö–∞–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è, –Ω–∞ —Ç–≤–æ–π –≤–∑–≥–ª—è–¥, —É–±–µ—Ä–µ–≥—É—Ç —Ç–µ–±—è –æ—Ç –ø–æ—Ç–µ—Ä–∏ –¥–µ–Ω–µ–≥ –∏ –ø–æ–º–æ–≥—É—Ç –∑–∞—â–∏—Ç–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø—Ä–∏ —Ö—Ä–∞–Ω–µ–Ω–∏–∏?",
    },
    5: {
        "question": "–ö–∞–∫–∏–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞—é—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —á–µ–ª–æ–≤–µ–∫—É, –µ—Å–ª–∏ —É –Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–µ–Ω—å–≥–∏?",
        "text": "üìΩ –£—Ä–æ–∫ 5. –ö—É–ø–∏ —Å–µ–π—á–∞—Å, –∑–∞–ø–ª–∞—Ç–∏—à—å –ø–æ—Ç–æ–º\n\n–ü–æ—Å–º–æ—Ç—Ä–∏ –≤–∏–¥–µ–æ:\nhttps://rutube.ru/video/private/c190ba709164a4e7fe3f0c6be9ffd5d9/?p=OSf95L2cKiR_FfNmC9xzrg\nhttps://youtube.com/shorts/wkbbH1NzmdY\n\n---\n\nüìù –ó–∞–¥–∞–Ω–∏–µ:\n\n–ö–∞–∫–∏–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞—é—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —á–µ–ª–æ–≤–µ–∫—É, –µ—Å–ª–∏ —É –Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–µ–Ω—å–≥–∏?",
    },
}

# —Ö—Ä–∞–Ω–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —à–∞–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–∞–º—è—Ç–∏
user_steps = {}

async def check_subscription(user_id):
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
        return member.status in ["member", "administrator", "creator"]
    except:
        return False

# —Å—Ç–∞—Ä—Ç
@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add("–ù–∞—á–∞—Ç—å")
    user_steps[message.from_user.id] = "start"
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç –¥–ª—è –∫—É—Ä—Å–∞. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", reply_markup=kb)

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ù–∞—á–∞—Ç—å
@dp.message_handler(lambda m: m.text == "–ù–∞—á–∞—Ç—å")
async def handle_start_button(message: types.Message):
    user_steps[message.from_user.id] = "ask_name"
    await message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=types.ReplyKeyboardRemove())

# –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —à–∞–≥–∏ –∞–Ω–∫–µ—Ç—ã
@dp.message_handler()
async def process(message: types.Message):
    user_id = message.from_user.id
    step = user_steps.get(user_id)

    if step == "ask_name":
        user_steps[user_id] = "ask_email"
        await message.answer("–£–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π email:")

    elif step == "ask_email":
        user_steps[user_id] = "ask_gender"
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        kb.add("–ú—É–∂—á–∏–Ω–∞", "–ñ–µ–Ω—â–∏–Ω–∞")
        await message.answer("–¢—ã –º—É–∂—á–∏–Ω–∞ –∏–ª–∏ –∂–µ–Ω—â–∏–Ω–∞?", reply_markup=kb)

    elif step == "ask_gender":
        user_steps[user_id] = "ask_age"
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        kb.add("–¥–æ 20", "20-30", "31-45", "46-60", "–±–æ–ª—å—à–µ 60")
        await message.answer("–£–∫–∞–∂–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:", reply_markup=kb)

    elif step == "ask_age":
        user_steps[user_id] = "ask_field"
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        kb.add("–ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å", "—Å–≤–æ–π –±–∏–∑–Ω–µ—Å", "—Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä", "—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –≤ –Ω–∞–π–º–µ", "—Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –≤ –Ω–∞–π–º–µ", "–Ω–µ —Ä–∞–±–æ—Ç–∞—é")
        await message.answer("–í—ã–±–µ—Ä–∏ —Å—Ñ–µ—Ä—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:", reply_markup=kb)

    elif step == "ask_field":
        user_steps[user_id] = "check_sub"
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        kb.add("–ì–æ—Ç–æ–≤–æ")
        await message.answer(
            "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª üëâ https://t.me/merkulyevy_live_evolution_space\n\n"
            "–ö–æ–≥–¥–∞ –ø–æ–¥–ø–∏—à–µ—à—å—Å—è ‚Äî –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
            reply_markup=kb
        )

    elif step == "check_sub":
        if message.text == "–ì–æ—Ç–æ–≤–æ":
            if await check_subscription(user_id):
                user_steps[user_id] = "lesson_1"
                await message.answer(lessons[1]["text"], reply_markup=types.ReplyKeyboardRemove())
            else:
                await message.answer("‚ùóÔ∏è –Ø –Ω–µ –≤–∏–∂—É –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ —Å–Ω–æ–≤–∞ –Ω–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª.")
        else:
            await message.answer("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–ì–æ—Ç–æ–≤–æ¬ª, –∫–æ–≥–¥–∞ –ø–æ–¥–ø–∏—à–µ—à—å—Å—è.")

    elif step and step.startswith("lesson_"):
        num = int(step.split("_")[1])
        # —Ç—É—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –±–∞–∑—É
        async with pool.acquire() as conn:
            await conn.execute(
                "INSERT INTO answers(user_id, lesson, answer) VALUES($1, $2, $3) "
                "ON CONFLICT (user_id, lesson) DO UPDATE SET answer=$3",
                user_id, num, message.text
            )
        if num < len(lessons):
            user_steps[user_id] = f"lesson_{num+1}"
            await message.answer(lessons[num+1]["text"])
        else:
            user_steps[user_id] = "done"
            await message.answer("üéâ –°–ø–∞—Å–∏–±–æ! –¢—ã –ø—Ä–æ—à—ë–ª –≤—Å–µ —É—Ä–æ–∫–∏.")

# —ç–∫—Å–ø–æ—Ä—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
ADMINS = [123456789, 987654321]  # —Å—é–¥–∞ –ø–æ–¥—Å—Ç–∞–≤—å id
@dp.message_handler(commands=["export"])
async def export_answers(message: types.Message):
    if message.from_user.id not in ADMINS:
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    async with pool.acquire() as conn:
        rows = await conn.fetch("SELECT user_id, lesson, answer FROM answers ORDER BY user_id, lesson")
    text = "üìí –í—Å–µ –æ—Ç–≤–µ—Ç—ã:\n\n"
    for r in rows:
        text += f"üë§ {r['user_id']} | –£—Ä–æ–∫ {r['lesson']} | {r['answer']}\n"
    await message.answer(text or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")

# —Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –≤ Postgres
async def on_startup(dp):
    global pool
    pool = await create_pool()
    async with pool.acquire() as conn:
        await conn.execute("""
        CREATE TABLE IF NOT EXISTS answers (
            user_id BIGINT,
            lesson INT,
            answer TEXT,
            PRIMARY KEY (user_id, lesson)
        )
        """)

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(on_startup(dp))
    executor.start_polling(dp, skip_updates=True)

import os
import io
import csv
import asyncpg
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

# ---------- config ----------
API_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_USERNAME = "@merkulyevy_live_evolution_space"

# –∞–¥–º–∏–Ω—ã: –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è ADMIN_IDS="123,456" –∏–ª–∏ –ø—Ä–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∏–∂–µ
ADMIN_IDS = [
    int(x) for x in (os.getenv("ADMIN_IDS", "").split(",") if os.getenv("ADMIN_IDS") else [])
] or [111111111, 222222222]  # <-- –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ id

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

pool: asyncpg.Pool = None  # postgres pool

# ---------- lessons ----------
lessons = {
    1: {
        "question": "–í—Å–ø–æ–º–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫–∏–µ –ø—Ä–µ–æ–¥–æ–ª—ë–Ω–Ω—ã–µ —Ç–æ–±–æ–π —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —É–∫—Ä–µ–ø–∏–ª–∏ —Ç–≤–æ—ë –∑–¥–æ—Ä–æ–≤—å–µ –∏ –ø–æ–º–æ–≥–ª–∏ –æ–±—Ä–µ—Å—Ç–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Å–∏–ª—É –∏ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ?",
        "text": (
            "üìΩ –£—Ä–æ–∫ 1. –ó–¥–æ—Ä–æ–≤—å–µ –º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ –¥–µ–Ω—å–≥–∏\n\n"
            "–ü–æ—Å–º–æ—Ç—Ä–∏ –≤–∏–¥–µ–æ:\n"
            "üîó Rutube: https://rutube.ru/video/private/438c67c0e3510477ba92ef1c9cbda807/?p=m8ZK3IF63nq3U8aiuKBfyQ\n"
            "üîó YouTube: https://youtube.com/shorts/_uTHQopErp4\n\n"
            "‚Äî ‚Äî ‚Äî\n\n"
            "üìù –ó–∞–¥–∞–Ω–∏–µ:\n"
            "–í—Å–ø–æ–º–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫–∏–µ –ø—Ä–µ–æ–¥–æ–ª—ë–Ω–Ω—ã–µ —Ç–æ–±–æ–π —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —É–∫—Ä–µ–ø–∏–ª–∏ —Ç–≤–æ—ë –∑–¥–æ—Ä–æ–≤—å–µ –∏ –ø–æ–º–æ–≥–ª–∏ –æ–±—Ä–µ—Å—Ç–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Å–∏–ª—É –∏ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ?"
        ),
    },
    2: {
        "question": "–†–∞—Å—Å–∫–∞–∂–∏ –æ –º–æ–º–µ–Ω—Ç–∞—Ö –≤ —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏, –∫–æ–≥–¥–∞ –¥–µ–Ω—å–≥–∏ –ø—Ä–∏–Ω–µ—Å–ª–∏ —Ç–µ–±–µ –Ω–∞—Å—Ç–æ—è—â–µ–µ —Å—á–∞—Å—Ç—å–µ –∏ —Ä–∞–¥–æ—Å—Ç—å. –ë—ã–ª–∏ –ª–∏ —ç–ø–∏–∑–æ–¥—ã, –∫–æ–≥–¥–∞ –æ–±–ª–∞–¥–∞–Ω–∏–µ –∏–º–∏ —Å—Ç–∞–ª–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –æ–≥–æ—Ä—á–µ–Ω–∏–π –∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏–π?",
        "text": (
            "üìΩ –£—Ä–æ–∫ 2. –î–µ–Ω—å–≥–∏ –º–æ–≥—É—Ç —Å–ø–∞—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ä–æ—Å—Ç–∏ –∏ —Å–º–µ—Ä—Ç–∏\n\n"
            "–ü–æ—Å–º–æ—Ç—Ä–∏ –≤–∏–¥–µ–æ:\n"
            "üîó Rutube: https://rutube.ru/video/private/a455fedbc14d98eeac76e09dec70aaa8/?p=O-rFwwAB4tvSNHOJK5gDgw\n"
            "üîó YouTube: https://youtube.com/shorts/6KOFfzMXeBo\n\n"
            "‚Äî ‚Äî ‚Äî\n\n"
            "üìù –ó–∞–¥–∞–Ω–∏–µ:\n"
            "–†–∞—Å—Å–∫–∞–∂–∏ –æ –º–æ–º–µ–Ω—Ç–∞—Ö –≤ —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏, –∫–æ–≥–¥–∞ –¥–µ–Ω—å–≥–∏ –ø—Ä–∏–Ω–µ—Å–ª–∏ —Ç–µ–±–µ –Ω–∞—Å—Ç–æ—è—â–µ–µ —Å—á–∞—Å—Ç—å–µ –∏ —Ä–∞–¥–æ—Å—Ç—å.\n"
            "–ë—ã–ª–∏ –ª–∏ —ç–ø–∏–∑–æ–¥—ã, –∫–æ–≥–¥–∞ –æ–±–ª–∞–¥–∞–Ω–∏–µ –∏–º–∏ —Å—Ç–∞–ª–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –æ–≥–æ—Ä—á–µ–Ω–∏–π –∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏–π?"
        ),
    },
    3: {
        "question": "–ü–æ–¥–µ–ª–∏—Å—å –∏—Å—Ç–æ—Ä–∏–µ–π –æ —Ç–æ–º, –∫–∞–∫ —Ç—ã —Ä–∞—Å–ø–æ—Ä—è–¥–∏–ª—Å—è(–∞—Å—å) —Å–ª—É—á–∞–π–Ω–æ –æ–±—Ä–µ—Ç—ë–Ω–Ω—ã–º–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏. –ö–∞–∫–æ–π –ø–æ–ª–µ–∑–Ω—ã–π –≤—ã–≤–æ–¥ —Ç—ã —Å–¥–µ–ª–∞–ª(–∞) –∏–∑ —ç—Ç–æ–≥–æ –æ–ø—ã—Ç–∞?",
        "text": (
            "üìΩ –£—Ä–æ–∫ 3. –õ–µ–≥–∫–∏–µ –¥–µ–Ω—å–≥–∏ –ª–µ–≥–∫–æ –¥–∞—é—Ç—Å—è\n\n"
            "–ü–æ—Å–º–æ—Ç—Ä–∏ –≤–∏–¥–µ–æ:\n"
            "üîó Rutube: https://rutube.ru/video/private/ad9e2b3c210d21cd23712045627dab40/?p=Ib29o4dCFybWBwITaw8EcA\n"
            "üîó YouTube: https://youtube.com/shorts/nzpJTNZseH8\n\n"
            "‚Äî ‚Äî ‚Äî\n\n"
            "üìù –ó–∞–¥–∞–Ω–∏–µ:\n"
            "–ü–æ–¥–µ–ª–∏—Å—å –∏—Å—Ç–æ—Ä–∏–µ–π –æ —Ç–æ–º, –∫–∞–∫ —Ç—ã —Ä–∞—Å–ø–æ—Ä—è–¥–∏–ª—Å—è(–∞—Å—å) —Å–ª—É—á–∞–π–Ω–æ –æ–±—Ä–µ—Ç—ë–Ω–Ω—ã–º–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏.\n"
            "–ö–∞–∫–æ–π –ø–æ–ª–µ–∑–Ω—ã–π –≤—ã–≤–æ–¥ —Ç—ã —Å–¥–µ–ª–∞–ª(–∞) –∏–∑ —ç—Ç–æ–≥–æ –æ–ø—ã—Ç–∞?"
        ),
    },
    4: {
        "question": "–ö–∞–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è, –Ω–∞ —Ç–≤–æ–π –≤–∑–≥–ª—è–¥, —É–±–µ—Ä–µ–≥—É—Ç —Ç–µ–±—è –æ—Ç –ø–æ—Ç–µ—Ä–∏ –¥–µ–Ω–µ–≥ –∏ –ø–æ–º–æ–≥—É—Ç –∑–∞—â–∏—Ç–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø—Ä–∏ —Ö—Ä–∞–Ω–µ–Ω–∏–∏?",
        "text": (
            "üìΩ –£—Ä–æ–∫ 4. –î–µ–Ω—å–≥–∏ –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–µ–∑ —Ä–∏—Å–∫–∞ –ø–æ—Ç–µ—Ä—è—Ç—å\n\n"
            "–ü–æ—Å–º–æ—Ç—Ä–∏ –≤–∏–¥–µ–æ:\n"
            "üîó Rutube: https://rutube.ru/video/private/17cda71a3427edf4f8210bff14862bcd/?p=mC_3osWPMwJgbZ1mICPjOQ\n"
            "üîó YouTube: https://youtube.com/shorts/nzpJTNZseH8\n\n"
            "‚Äî ‚Äî ‚Äî\n\n"
            "üìù –ó–∞–¥–∞–Ω–∏–µ:\n"
            "–ö–∞–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è, –Ω–∞ —Ç–≤–æ–π –≤–∑–≥–ª—è–¥, —É–±–µ—Ä–µ–≥—É—Ç —Ç–µ–±—è –æ—Ç –ø–æ—Ç–µ—Ä–∏ –¥–µ–Ω–µ–≥ –∏ –ø–æ–º–æ–≥—É—Ç –∑–∞—â–∏—Ç–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø—Ä–∏ —Ö—Ä–∞–Ω–µ–Ω–∏–∏?"
        ),
    },
    5: {
        "question": "–ö–∞–∫–∏–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞—é—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —á–µ–ª–æ–≤–µ–∫—É, –µ—Å–ª–∏ —É –Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–µ–Ω—å–≥–∏?",
        "text": (
            "üìΩ –£—Ä–æ–∫ 5. –ö—É–ø–∏ —Å–µ–π—á–∞—Å, –∑–∞–ø–ª–∞—Ç–∏—à—å –ø–æ—Ç–æ–º\n\n"
            "–ü–æ—Å–º–æ—Ç—Ä–∏ –≤–∏–¥–µ–æ:\n"
            "üîó Rutube: https://rutube.ru/video/private/c190ba709164a4e7fe3f0c6be9ffd5d9/?p=OSf95L2cKiR_FfNmC9xzrg\n"
            "üîó YouTube: https://youtube.com/shorts/wkbbH1NzmdY\n\n"
            "‚Äî ‚Äî ‚Äî\n\n"
            "üìù –ó–∞–¥–∞–Ω–∏–µ:\n"
            "–ö–∞–∫–∏–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞—é—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —á–µ–ª–æ–≤–µ–∫—É, –µ—Å–ª–∏ —É –Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–µ–Ω—å–≥–∏?"
        ),
    },
}

# ---------- DB helpers ----------
async def init_db():
    async with pool.acquire() as conn:
        await conn.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id        BIGINT PRIMARY KEY,
            name      TEXT,
            email     TEXT,
            gender    TEXT,
            age_group TEXT,
            work_area TEXT,
            step      TEXT NOT NULL DEFAULT 'start',
            current   INT  NOT NULL DEFAULT 1
        );
        """)
        await conn.execute("""
        CREATE TABLE IF NOT EXISTS answers (
            user_id    BIGINT REFERENCES users(id) ON DELETE CASCADE,
            lesson_num INT,
            answer     TEXT,
            PRIMARY KEY (user_id, lesson_num)
        );
        """)

async def get_user(user_id: int) -> dict:
    async with pool.acquire() as conn:
        row = await conn.fetchrow("SELECT * FROM users WHERE id=$1", user_id)
        if not row:
            await conn.execute(
                "INSERT INTO users(id) VALUES($1) ON CONFLICT DO NOTHING", user_id
            )
            row = await conn.fetchrow("SELECT * FROM users WHERE id=$1", user_id)
        return dict(row)

async def update_user(user_id: int, **fields):
    if not fields:
        return
    cols, vals = [], []
    for i, (k, v) in enumerate(fields.items(), start=1):
        cols.append(f"{k} = ${i}")
        vals.append(v)
    vals.append(user_id)
    sql = f"UPDATE users SET {', '.join(cols)} WHERE id = ${len(vals)}"
    async with pool.acquire() as conn:
        await conn.execute(sql, *vals)

async def save_answer(user_id: int, lesson_num: int, answer: str):
    async with pool.acquire() as conn:
        await conn.execute(
            """
            INSERT INTO answers(user_id, lesson_num, answer)
            VALUES($1,$2,$3)
            ON CONFLICT (user_id, lesson_num) DO UPDATE SET answer=EXCLUDED.answer
            """,
            user_id, lesson_num, answer
        )

async def get_answers(user_id: int) -> dict:
    async with pool.acquire() as conn:
        rows = await conn.fetch(
            "SELECT lesson_num, answer FROM answers WHERE user_id=$1 ORDER BY lesson_num", user_id
        )
        return {str(r["lesson_num"]): r["answer"] for r in rows}

async def reset_user(user_id: int):
    async with pool.acquire() as conn:
        await conn.execute("DELETE FROM answers WHERE user_id=$1", user_id)
        await conn.execute("UPDATE users SET step='start', current=1 WHERE id=$1", user_id)

# ---------- utils ----------
async def check_subscription(user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
        return member.status in ("member", "administrator", "creator")
    except Exception:
        return False

def start_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add(types.KeyboardButton("–ù–∞—á–∞—Ç—å"))
    return kb

def gender_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add("–ú—É–∂—á–∏–Ω–∞", "–ñ–µ–Ω—â–∏–Ω–∞")
    return kb

def age_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add("–¥–æ 20", "20-30", "31-45", "46-60", "–±–æ–ª—å—à–µ 60")
    return kb

def work_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.row("–ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å", "—Å–≤–æ–π –±–∏–∑–Ω–µ—Å", "—Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä")
    kb.row("—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –≤ –Ω–∞–π–º–µ", "—Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –≤ –Ω–∞–π–º–µ", "–Ω–µ —Ä–∞–±–æ—Ç–∞—é")
    return kb

def done_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.add("–ì–æ—Ç–æ–≤–æ")
    return kb

# ---------- handlers ----------
@dp.message_handler(commands=["start"])
async def cmd_start(m: types.Message):
    user = await get_user(m.from_user.id)
    if user["step"] == "start":
        await m.answer("–ø—Ä–∏–≤–µ—Ç! üëã —è –±–æ—Ç –∫—É—Ä—Å–∞ ¬´–≥–ª—é–∫–∏ –ø—Ä–æ –¥–µ–Ω—å–≥–∏¬ª. –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", reply_markup=start_kb())
    else:
        # –ø—Ä–æ–¥–æ–ª–∂–∏–º —Å —Ç–æ–≥–æ –º–µ—Å—Ç–∞, –≥–¥–µ —á–µ–ª–æ–≤–µ–∫ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è
        await continue_flow(m, user)

@dp.message_handler(commands=["reset"])
async def cmd_reset(m: types.Message):
    await reset_user(m.from_user.id)
    await m.answer("–æ–∫, –≤—Å—ë –æ–±–Ω—É–ª–∏–ª–∞. –∂–º–∏ ¬´–ù–∞—á–∞—Ç—å¬ª.", reply_markup=start_kb())

@dp.message_handler(commands=["answers"])
async def cmd_answers(m: types.Message):
    answers = await get_answers(m.from_user.id)
    if not answers:
        await m.answer("–ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ ‚úçÔ∏è")
        return
    text = "üìí —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –ø–æ –∫—É—Ä—Å—É:\n\n"
    for num in sorted(answers, key=lambda x: int(x)):
        q = lessons[int(num)]["question"]
        text += f"üìΩ —É—Ä–æ–∫ {num}. {q}\n–æ—Ç–≤–µ—Ç: {answers[num]}\n\n"
    await m.answer(text)

@dp.message_handler(commands=["export"])
async def cmd_export(m: types.Message):
    if m.from_user.id not in ADMIN_IDS:
        await m.answer("‚õî –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
        return
    async with pool.acquire() as conn:
        rows = await conn.fetch("""
            SELECT u.id, u.name, u.email, u.gender, u.age_group, u.work_area, a.lesson_num, a.answer
            FROM users u
            LEFT JOIN answers a ON a.user_id = u.id
            ORDER BY u.id, a.lesson_num
        """)
    # –¥–µ–ª–∞–µ–º CSV
    buf = io.StringIO()
    w = csv.writer(buf)
    w.writerow(["user_id","name","email","gender","age","work_area","lesson","answer"])
    for r in rows:
        w.writerow([r["id"], r["name"], r["email"], r["gender"], r["age_group"], r["work_area"], r["lesson_num"], r["answer"]])
    buf.seek(0)
    await m.answer_document(types.InputFile(buf, filename="export.csv"))

@dp.message_handler(lambda m: m.text == "–ù–∞—á–∞—Ç—å")
async def btn_start(m: types.Message):
    await update_user(m.from_user.id, step="ask_name")
    await m.answer("–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler()
async def any_text(m: types.Message):
    user = await get_user(m.from_user.id)
    step = user["step"]

    if step == "ask_name":
        await update_user(m.from_user.id, name=m.text.strip(), step="ask_email")
        await m.answer("—É–∫–∞–∂–∏ —Å–≤–æ–π email:")

    elif step == "ask_email":
        await update_user(m.from_user.id, email=m.text.strip(), step="ask_gender")
        await m.answer("—Ç—ã –º—É–∂—á–∏–Ω–∞ –∏–ª–∏ –∂–µ–Ω—â–∏–Ω–∞?", reply_markup=gender_kb())

    elif step == "ask_gender":
        await update_user(m.from_user.id, gender=m.text.strip(), step="ask_age")
        await m.answer("—Ç–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:", reply_markup=age_kb())

    elif step == "ask_age":
        await update_user(m.from_user.id, age_group=m.text.strip(), step="ask_work")
        await m.answer("–≤—ã–±–µ—Ä–∏ —Å—Ñ–µ—Ä—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:", reply_markup=work_kb())

    elif step == "ask_work":
        await update_user(m.from_user.id, work_area=m.text.strip(), step="check_sub")
        await m.answer(
            "—Å–ø–∞—Å–∏–±–æ! —Ç–µ–ø–µ—Ä—å –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:\n"
            "https://t.me/merkulyevy_live_evolution_space\n\n"
            "–∫–∞–∫ –ø–æ–¥–ø–∏—à–µ—à—å—Å—è ‚Äî –∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
            reply_markup=done_kb()
        )

    elif step == "check_sub":
        if m.text == "–ì–æ—Ç–æ–≤–æ":
            if await check_subscription(m.from_user.id):
                await update_user(m.from_user.id, step="lesson", current=1)
                await m.answer("–ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚ú® –Ω–∞—á–∏–Ω–∞–µ–º –∫—É—Ä—Å!", reply_markup=types.ReplyKeyboardRemove())
                await m.answer(lessons[1]["text"])
            else:
                await m.answer("—è –ø–æ–∫–∞ –Ω–µ –≤–∏–∂—É –ø–æ–¥–ø–∏—Å–∫–∏ ü§î –ø–æ–¥–ø–∏—à–∏—Å—å –∏ –Ω–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª –µ—â—ë —Ä–∞–∑.")
        else:
            await m.answer("–Ω–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª, –∫–æ–≥–¥–∞ –ø–æ–¥–ø–∏—à–µ—à—å—Å—è üôå")

    elif step == "lesson":
        cur = user["current"]
        await save_answer(m.from_user.id, cur, m.text.strip())
        next_id = cur + 1
        if next_id in lessons:
            await update_user(m.from_user.id, current=next_id)
            await m.answer(lessons[next_id]["text"])
        else:
            await update_user(m.from_user.id, step="done")
            await m.answer("üéâ –∫—É—Ä—Å –∑–∞–≤–µ—Ä—à—ë–Ω! –Ω–∞–ø–∏—à–∏ /answers, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã.")

    elif step == "done":
        await m.answer("–∫—É—Ä—Å —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω. –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å /answers –∏–ª–∏ /reset —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")

    else:
        # –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–µ ‚Äî –Ω–∞—á–Ω—ë–º —Å–Ω–∞—á–∞–ª–∞
        await update_user(m.from_user.id, step="start")
        await m.answer("–¥–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Å–Ω–∞—á–∞–ª–∞ üôÇ", reply_markup=start_kb())

async def continue_flow(m: types.Message, user: dict):
    """–ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –≤–µ—Ä–Ω—É–ª—Å—è –Ω–µ —Å 'start' ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫."""
    step = user["step"]
    prompts = {
        "ask_name": "–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
        "ask_email": "—É–∫–∞–∂–∏ —Å–≤–æ–π email:",
        "ask_gender": "—Ç—ã –º—É–∂—á–∏–Ω–∞ –∏–ª–∏ –∂–µ–Ω—â–∏–Ω–∞?",
        "ask_age": "—Ç–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:",
        "ask_work": "–≤—ã–±–µ—Ä–∏ —Å—Ñ–µ—Ä—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:",
        "check_sub": "–ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª: https://t.me/merkulyevy_live_evolution_space",
        "lesson": lessons[user.get("current", 1)]["text"] if user.get("current", 1) in lessons else "–ø—Ä–æ–¥–æ–ª–∂–∏–º?",
        "done": "–∫—É—Ä—Å –∑–∞–≤–µ—Ä—à—ë–Ω. /answers –ø–æ–∫–∞–∂–µ—Ç —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã.",
    }
    reply = prompts.get(step, "–ø—Ä–æ–¥–æ–ª–∂–∏–º?")
    await m.answer(reply)

# ---------- startup ----------
async def on_startup(_):
    global pool
    pool = await asyncpg.create_pool(
        user=os.getenv("PGUSER"),
        password=os.getenv("PGPASSWORD"),
        database=os.getenv("PGDATABASE"),
        host=os.getenv("PGHOST"),
        port=os.getenv("PGPORT"),
        min_size=1, max_size=5,
    )
    await init_db()

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)

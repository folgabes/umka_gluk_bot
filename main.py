import os
import asyncpg
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

API_TOKEN = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")

bot = Bot(token=API_TOKEN, parse_mode="Markdown")
dp = Dispatcher(bot)

CHANNEL_USERNAME = "@merkulyevy_live_evolution_space"
ADMIN_IDS = [123456789, 987654321]  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–∏ id

# ---------------- –£–†–û–ö–ò ----------------
lessons = {
    1: {"question": "–í—Å–ø–æ–º–Ω–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∫—Ä–µ–ø–∏–ª–∏ —Ç–≤–æ—ë –∑–¥–æ—Ä–æ–≤—å–µ?",
        "text": "üìΩ –£—Ä–æ–∫ 1. –ó–¥–æ—Ä–æ–≤—å–µ –º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ –¥–µ–Ω—å–≥–∏\n\n[YouTube](https://youtube.com/shorts/_uTHQopErp4)"},
    2: {"question": "–†–∞—Å—Å–∫–∞–∂–∏ –æ –º–æ–º–µ–Ω—Ç–∞—Ö —Å—á–∞—Å—Ç—å—è –∏ –æ–≥–æ—Ä—á–µ–Ω–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –¥–µ–Ω—å–≥–∞–º–∏?",
        "text": "üìΩ –£—Ä–æ–∫ 2. –î–µ–Ω—å–≥–∏ –º–æ–≥—É—Ç —Å–ø–∞—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ä–æ—Å—Ç–∏\n\n[YouTube](https://youtube.com/shorts/6KOFfzMXeBo)"},
    3: {"question": "–ü–æ–¥–µ–ª–∏—Å—å –∏—Å—Ç–æ—Ä–∏–µ–π –æ —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–µ–Ω—å–≥–∞—Ö. –ö–∞–∫–æ–π –≤—ã–≤–æ–¥ —Ç—ã —Å–¥–µ–ª–∞–ª?",
        "text": "üìΩ –£—Ä–æ–∫ 3. –õ—ë–≥–∫–∏–µ –¥–µ–Ω—å–≥–∏ –ª–µ–≥–∫–æ –¥–∞—é—Ç—Å—è\n\n[YouTube](https://youtube.com/shorts/nzpJTNZseH8)"},
    4: {"question": "–ö–∞–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —É–±–µ—Ä–µ–≥—É—Ç —Ç–µ–±—è –æ—Ç –ø–æ—Ç–µ—Ä–∏ –¥–µ–Ω–µ–≥?",
        "text": "üìΩ –£—Ä–æ–∫ 4. –î–µ–Ω—å–≥–∏ –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å\n\n[YouTube](https://youtube.com/shorts/nzpJTNZseH8)"},
    5: {"question": "–ö–∞–∫–∏–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –¥–µ–Ω–µ–≥?",
        "text": "üìΩ –£—Ä–æ–∫ 5. –ö—É–ø–∏ —Å–µ–π—á–∞—Å, –∑–∞–ø–ª–∞—Ç–∏—à—å –ø–æ—Ç–æ–º\n\n[YouTube](https://youtube.com/shorts/wkbbH1NzmdY)"}
}

# ---------------- –ê–ù–ö–ï–¢–ê ----------------
gender_options = ["–ú—É–∂—á–∏–Ω–∞", "–ñ–µ–Ω—â–∏–Ω–∞"]
age_options = ["–¥–æ 20", "20-30", "31-45", "46-60", "–±–æ–ª—å—à–µ 60"]
work_options = ["–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å", "–°–≤–æ–π –±–∏–∑–Ω–µ—Å", "–§—Ä–∏–ª–∞–Ω—Å–µ—Ä",
                "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –≤ –Ω–∞–π–º–µ", "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –≤ –Ω–∞–π–º–µ", "–ù–µ —Ä–∞–±–æ—Ç–∞—é"]

# ---------------- –ë–ê–ó–ê ----------------
async def init_db():
    conn = await asyncpg.connect(DATABASE_URL)
    await conn.execute("""
    CREATE TABLE IF NOT EXISTS users (
        user_id BIGINT PRIMARY KEY,
        name TEXT,
        contact TEXT,
        email TEXT,
        gender TEXT,
        age TEXT,
        work_area TEXT,
        step TEXT,
        current INT DEFAULT 1
    );
    """)
    await conn.execute("""
    CREATE TABLE IF NOT EXISTS answers (
        user_id BIGINT,
        lesson_id INT,
        answer TEXT,
        PRIMARY KEY (user_id, lesson_id)
    );
    """)
    await conn.close()

async def get_user(user_id):
    conn = await asyncpg.connect(DATABASE_URL)
    user = await conn.fetchrow("SELECT * FROM users WHERE user_id=$1", user_id)
    if not user:
        await conn.execute("INSERT INTO users(user_id, step) VALUES($1, $2)", user_id, "ask_name")
        user = await conn.fetchrow("SELECT * FROM users WHERE user_id=$1", user_id)
    await conn.close()
    return dict(user)

async def update_user(user_id, **fields):
    conn = await asyncpg.connect(DATABASE_URL)
    for k, v in fields.items():
        await conn.execute(f"UPDATE users SET {k}=$1 WHERE user_id=$2", v, user_id)
    await conn.close()

async def save_answer(user_id, lesson_id, answer):
    conn = await asyncpg.connect(DATABASE_URL)
    await conn.execute("""
        INSERT INTO answers(user_id, lesson_id, answer)
        VALUES($1,$2,$3)
        ON CONFLICT (user_id, lesson_id) DO UPDATE SET answer=$3
    """, user_id, lesson_id, answer)
    await conn.close()

async def get_answers(user_id):
    conn = await asyncpg.connect(DATABASE_URL)
    rows = await conn.fetch("SELECT * FROM answers WHERE user_id=$1 ORDER BY lesson_id", user_id)
    await conn.close()
    return rows

# ---------------- –ü–û–î–ü–ò–°–ö–ê ----------------
async def check_subscription(user_id):
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
        return member.status in ["member", "administrator", "creator"]
    except:
        return False

# ---------------- –ö–û–ú–ê–ù–î–´ ----------------
@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    await update_user(message.from_user.id, step="ask_name")
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –º–∏–Ω–∏-–∫—É—Ä—Å–∞ *–ì–ª—é–∫–∏ –ø—Ä–æ –¥–µ–Ω—å–≥–∏*.\n\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")

@dp.message_handler(commands=["reset"])
async def reset_cmd(message: types.Message):
    await update_user(message.from_user.id, step="ask_name", current=1)
    conn = await asyncpg.connect(DATABASE_URL)
    await conn.execute("DELETE FROM answers WHERE user_id=$1", message.from_user.id)
    await conn.close()
    await message.answer("–ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω—É–ª—ë–Ω. –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")

@dp.message_handler(commands=["help"])
async def help_cmd(message: types.Message):
    for admin in ADMIN_IDS:
        await bot.send_message(admin, f"üÜò –ü–æ–º–æ—â—å –æ—Ç @{message.from_user.username} ({message.from_user.id})")
    await message.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫—É—Ä–∞—Ç–æ—Ä—É. –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π.")

@dp.message_handler(commands=["answers"])
async def answers_cmd(message: types.Message):
    rows = await get_answers(message.from_user.id)
    if not rows:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ ‚úçÔ∏è")
        return
    text = "üìí –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –ø–æ –∫—É—Ä—Å—É:\n\n"
    for r in rows:
        q = lessons[r["lesson_id"]]["question"]
        text += f"üìΩ –£—Ä–æ–∫ {r['lesson_id']}. {q}\n–û—Ç–≤–µ—Ç: {r['answer']}\n\n"
    await message.answer(text)

@dp.message_handler(commands=["export"])
async def export_cmd(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    conn = await asyncpg.connect(DATABASE_URL)
    rows = await conn.fetch("SELECT * FROM answers")
    await conn.close()
    text = "\n".join([f"{r['user_id']} | {r['lesson_id']} | {r['answer']}" for r in rows])
    await message.answer(f"–≠–∫—Å–ø–æ—Ä—Ç:\n{text[:4000]}")

# ---------------- –ê–ù–ö–ï–¢–ê ----------------
@dp.message_handler()
async def handle_message(message: types.Message):
    user = await get_user(message.from_user.id)
    step = user["step"]

    if step == "ask_name":
        await update_user(message.from_user.id, name=message.text.strip(), step="ask_contact")
        await message.answer("–û—Å—Ç–∞–≤—å –∫–æ–Ω—Ç–∞–∫—Ç: —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –Ω–∏–∫ –≤ Telegram.")

    elif step == "ask_contact":
        await update_user(message.from_user.id, contact=message.text.strip(), step="ask_email")
        await message.answer("–ò –ø–æ—Å–ª–µ–¥–Ω–µ–µ ‚Äî —Ç–≤–æ–π email:")

    elif step == "ask_email":
        await update_user(message.from_user.id, email=message.text.strip(), step="ask_gender")
        keyboard = InlineKeyboardMarkup()
        for g in gender_options:
            keyboard.add(InlineKeyboardButton(g, callback_data=f"gender:{g}"))
        await message.answer("–¢—ã –º—É–∂—á–∏–Ω–∞ –∏–ª–∏ –∂–µ–Ω—â–∏–Ω–∞?", reply_markup=keyboard)

    elif step == "lesson":
        current = user["current"]
        if current > len(lessons):
            await message.answer("–ö—É—Ä—Å –∑–∞–≤–µ—Ä—à—ë–Ω üéâ –ù–∞–ø–∏—à–∏ /answers, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã.")
            return
        await save_answer(message.from_user.id, current, message.text.strip())
        await update_user(message.from_user.id, current=current + 1)
        await send_lesson(message.from_user.id, current + 1)

# ---------------- CALLBACK ----------------
@dp.callback_query_handler(lambda c: c.data.startswith("gender:"))
async def process_gender(callback_query: CallbackQuery):
    gender = callback_query.data.split(":", 1)[1]
    await update_user(callback_query.from_user.id, gender=gender, step="ask_age")
    keyboard = InlineKeyboardMarkup()
    for a in age_options:
        keyboard.add(InlineKeyboardButton(a, callback_data=f"age:{a}"))
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith("age:"))
async def process_age(callback_query: CallbackQuery):
    age = callback_query.data.split(":", 1)[1]
    await update_user(callback_query.from_user.id, age=age, step="ask_work_area")
    keyboard = InlineKeyboardMarkup()
    for w in work_options:
        keyboard.add(InlineKeyboardButton(w, callback_data=f"work:{w}"))
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Å—Ñ–µ—Ä—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith("work:"))
async def process_work(callback_query: CallbackQuery):
    work = callback_query.data.split(":", 1)[1]
    if await check_subscription(callback_query.from_user.id):
        await update_user(callback_query.from_user.id, work_area=work, step="lesson", current=1)
        await bot.send_message(callback_query.from_user.id, "‚ú® –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ù–∞—á–∏–Ω–∞–µ–º –∫—É—Ä—Å!")
        await send_lesson(callback_query.from_user.id, 1)
    else:
        await update_user(callback_query.from_user.id, work_area=work, step="waiting_subscription")
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/merkulyevy_live_evolution_space"))
        keyboard.add(InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription"))
        await bot.send_message(callback_query.from_user.id,
            "‚ö†Ô∏è –ß—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –∫—É—Ä—Å, –Ω—É–∂–Ω–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –∫–∞–Ω–∞–ª.\n\n–ü–æ–¥–ø–∏—à–∏—Å—å –∏ –Ω–∞–∂–º–∏ ¬´–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è¬ª.",
            reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == "check_subscription")
async def process_subscription(callback_query: CallbackQuery):
    if await check_subscription(callback_query.from_user.id):
        await update_user(callback_query.from_user.id, step="lesson", current=1)
        await bot.send_message(callback_query.from_user.id, "–û—Ç–ª–∏—á–Ω–æ, –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚ú® –ù–∞—á–∏–Ω–∞–µ–º –∫—É—Ä—Å!")
        await send_lesson(callback_query.from_user.id, 1)
    else:
        await bot.send_message(callback_query.from_user.id, "–ü–æ–∫–∞ –Ω–µ –≤–∏–∂—É –ø–æ–¥–ø–∏—Å–∫–∏ ü§î –ü—Ä–æ–≤–µ—Ä—å –µ—â—ë —Ä–∞–∑.")

# ---------------- –£–†–û–ö–ò ----------------
async def send_lesson(user_id, lesson_id):
    lesson = lessons.get(lesson_id)
    if lesson:
        await bot.send_message(user_id, lesson["text"])
    else:
        await bot.send_message(user_id, "–ö—É—Ä—Å –∑–∞–≤–µ—Ä—à—ë–Ω üéâ –ù–∞–ø–∏—à–∏ /answers, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã.")

# ---------------- –ó–ê–ü–£–°–ö ----------------
if __name__ == "__main__":
    import asyncio
    loop = asyncio.get_event_loop()
    loop.run_until_complete(init_db())
    executor.start_polling(dp, skip_updates=True)

from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
import os, json

API_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=API_TOKEN, parse_mode="Markdown")
dp = Dispatcher(bot)

CHANNEL_USERNAME = "@merkulyevy_live_evolution_space"

# –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
users = {}

# –≤–∞—Ä–∏–∞–Ω—Ç—ã
gender_options = ["–ú—É–∂—á–∏–Ω–∞", "–ñ–µ–Ω—â–∏–Ω–∞"]
age_options = ["–¥–æ 20", "20-30", "31-45", "46-60", "–±–æ–ª—å—à–µ 60"]
work_options = [
    "–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å", "–°–≤–æ–π –±–∏–∑–Ω–µ—Å", "–§—Ä–∏–ª–∞–Ω—Å–µ—Ä",
    "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –≤ –Ω–∞–π–º–µ", "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –≤ –Ω–∞–π–º–µ",
    "–ù–µ —Ä–∞–±–æ—Ç–∞—é –ø–æ —Ä–∞–∑–Ω—ã–º –ø—Ä–∏—á–∏–Ω–∞–º"
]

# –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async def check_subscription(user_id):
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
        return member.status in ["member", "administrator", "creator"]
    except:
        return False

# /start
@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    users[message.from_user.id] = {"step": "ask_name"}
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –º–∏–Ω–∏-–∫—É—Ä—Å–∞.\n\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")

# /export
@dp.message_handler(commands=["export"])
async def export_cmd(message: types.Message):
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –≤ —Ñ–∞–π–ª
    with open("export.json", "w", encoding="utf-8") as f:
        json.dump(users, f, ensure_ascii=False, indent=2)

    await message.answer_document(open("export.json", "rb"))

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
@dp.message_handler()
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    user = users.get(user_id, {"step": "ask_name"})
    step = user.get("step")

    if step == "ask_name":
        user["name"] = message.text.strip()
        user["step"] = "ask_contact"
        await message.answer("–û—Å—Ç–∞–≤—å –∫–æ–Ω—Ç–∞–∫—Ç: —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –Ω–∏–∫ –≤ Telegram.")

    elif step == "ask_contact":
        user["contact"] = message.text.strip()
        user["step"] = "ask_gender"
        kb = InlineKeyboardMarkup()
        for g in gender_options:
            kb.add(InlineKeyboardButton(g, callback_data=f"gender:{g}"))
        await message.answer("–í—ã –º—É–∂—á–∏–Ω–∞ –∏–ª–∏ –∂–µ–Ω—â–∏–Ω–∞?", reply_markup=kb)

    elif step == "ask_what":
        user["what"] = message.text.strip()
        user["step"] = "waiting_subscription"
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/merkulyevy_live_evolution_space"))
        kb.add(InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription"))
        await message.answer(
            "‚ö†Ô∏è –ß—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –∫—É—Ä—Å, –Ω—É–∂–Ω–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.\n\n–ü–æ–¥–ø–∏—à–∏—Å—å –∏ –Ω–∞–∂–º–∏ ¬´–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è¬ª.",
            reply_markup=kb
        )

    users[user_id] = user

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler(lambda c: c.data.startswith("gender:"))
async def process_gender(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    g = callback_query.data.split(":", 1)[1]
    users[user_id]["gender"] = g
    users[user_id]["step"] = "ask_age"
    kb = InlineKeyboardMarkup()
    for a in age_options:
        kb.add(InlineKeyboardButton(a, callback_data=f"age:{a}"))
    await bot.send_message(user_id, "–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("age:"))
async def process_age(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    a = callback_query.data.split(":", 1)[1]
    users[user_id]["age"] = a
    users[user_id]["step"] = "ask_work"
    kb = InlineKeyboardMarkup()
    for w in work_options:
        kb.add(InlineKeyboardButton(w, callback_data=f"work:{w}"))
    await bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Å—Ñ–µ—Ä—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("work:"))
async def process_work(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    w = callback_query.data.split(":", 1)[1]
    users[user_id]["work"] = w
    users[user_id]["step"] = "ask_what"
    await bot.send_message(user_id, "–ß—Ç–æ –≤–∞—Å *–∑–∞—Ü–µ–ø–∏–ª–æ* –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∫—É—Ä—Å–∞?")

@dp.callback_query_handler(lambda c: c.data == "check_subscription")
async def process_subscription(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    if await check_subscription(user_id):
        await bot.send_message(user_id, "‚ú® –û—Ç–ª–∏—á–Ω–æ, –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ú–æ–∂–Ω–æ –∏–¥—Ç–∏ –¥–∞–ª—å—à–µ üöÄ")
        users[user_id]["step"] = "done"
    else:
        await bot.send_message(user_id, "–ü–æ–∫–∞ –Ω–µ –≤–∏–∂—É –ø–æ–¥–ø–∏—Å–∫–∏ ü§î –ü—Ä–æ–≤–µ—Ä—å –µ—â—ë —Ä–∞–∑ –∏ –Ω–∞–∂–º–∏ ¬´–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è¬ª.")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
